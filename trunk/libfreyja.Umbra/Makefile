################################################################
# Mongoose <stu7440@westga.edu>
################################################################
# + Cleaner clean
# + Add new include tree
# + Add new flags
# + Install/Uninstall
# + Lots of misc new features
################################################################

NAME=freyja
MAJOR_VERSION=0
MINOR_VERSION=9
MICRO_VERSION=0
BRANCH=Umbra
BUILD_ID=20041216
VERSION=$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION)$(BRANCH)
BUILD_HOST=`uname -n -m -s`
URL=http://icculus.org/freyja
EMAIL=mongoose@icculus.org
EXT=.so
TREE_DIR=libfreyja.Umbra
TARBALL_NAME=lib$(NAME)-$(VERSION).$(BUILD_ID)$(BRANCH)

################################################################

BUILD_SELECT=debug

# -DMODEL_PLUGINS
BASE_DEFS=-DMODEL_PLUGINS

# -DDEBUG -DEXPERIMENTAL -DFIXME -DOBSOLETE
DEBUG_DEFS=-DDEBUG -DEXPERIMENTAL

################################################################

#CONFIGURE_DEF=`grep -e "-D" ./config.cache`
#CONFIGURE_LNK=`grep -e "-l" ./config.cache`
CONFIGURE_DEF=-DFREYJAIMAGE_PLUGINS -DFREYJA_PLUGINS
CONFIGURE_LNK=

################################################################

CC=gcc

################################################################


BUILD_DEBUG_DIR=bin/debug
BUILD_RELEASE_DIR=bin/release
BUILD_PROF_DIR=bin/prof
BUILD_TEST_DIR=bin/test
BUILD_INSTALL_DIR=bin/$(BUILD_SELECT)

INSTALL_BIN=/usr/local/bin
INSTALL_LIB=/usr/local/lib
INSTALL_INCLUDE=/usr/local/include
PLUGIN_INSTALL_DIR=$(INSTALL_LIB)/$(NAME)/modules

################################################################

BASE_CFLAGS=-Wall -Isrc/lib -Isrc/utils \
	$(CONFIGURE_DEF) \
	-DPLUGIN_IMAGE_DIR=\"\\\"$(PLUGIN_INSTALL_DIR)/image\\\"\" \
	-DVERSION=\"\\\"$(VERSION)-$(BUILD_ID)\\\"\" \
	$(BASE_DEFS)

LDFLAGS=$(CONFIGURE_LNK) -lm -ldl
#LDFLAGS += -Wl,-z,defs
#LDFLAGS += -Wl,-O1
RELEASE_CFLAGS=$(BASE_CFLAGS) -ffast-math -funroll-loops \
	-fomit-frame-pointer -fexpensive-optimizations -O2
DEBUG_CFLAGS=$(BASE_CFLAGS) -g $(DEBUG_DEFS)

SHLIBEXT=$(EXT).$(VERSION)
SHLIBLDFLAGS=$(LDFLAGS) -fPIC -shared

MODULE_CFLAGS=$(BASE_CFLAGS) -g -DFREYJA_PLUGINS
MODULE_LD_FLAGS=-lfreyja -lstdc++ -shared -fPIC -ldl -rdynamic 
#		--warn-unresolved-symbols -Wl -z defs

################################################################

DO_CC=$(CC) $(CFLAGS) -o $@ -c $<
DO_SHLIB_CC=$(CC) $(CFLAGS) $(SHLIBCFLAGS) -o $@ -c $<

TARGETS=$(BUILDDIR)/lib$(NAME)$(SHLIBEXT)
TESTS=$(BUILDDIR)/$(NAME).test

################################################################

auto: $(BUILD_SELECT)

all: debug release prof

debug:
	@-mkdir -p $(BUILD_DEBUG_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_DEBUG_DIR) \
	CFLAGS="$(DEBUG_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

prof:
	@-mkdir -p $(BUILD_PROF_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_PROF_DIR) \
	CFLAGS="$(DEBUG_CFLAGS) -pg" \
	LD_FLAGS="$(LD_FLAGS) -pg"

release:
	@-mkdir -p $(BUILD_RELEASE_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_RELEASE_DIR) \
	CFLAGS="$(RELEASE_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

depend-tools:
	@-find ./tools -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) -Isrc/lib -Isrc/ds -Isrc/utils {} \; >> depend

depend-plugins:
	@-find ./plugins/image -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) -Isrc/lib -Isrc/ds -Isrc/utils {} \; >> depend
	@-find ./plugins/model -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) -Isrc/lib -Isrc/ds -Isrc/utils {} \; >> depend

depend:
	@-echo -n Making deps...
	@-echo "# Autogenerated dependency file" > depend
	@-find ./src -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) -Isrc/lib -Isrc/ds -Isrc/utils {} \; >> depend
	@-echo "       [done]"
	$(MAKE) depend-plugins
	$(MAKE) depend-tools

targets: $(TARGETS)

PROG_OBJS = \
	$(BUILDDIR)/FreyjaPluginABI.o \
	$(BUILDDIR)/Egg.o \
	$(BUILDDIR)/EggPlugin.o \
	$(BUILDDIR)/Freyja.o \
	$(BUILDDIR)/FreyjaPlugin.o \
	$(BUILDDIR)/FreyjaCamera.o \
	$(BUILDDIR)/FreyjaPrinter.o \
	$(BUILDDIR)/FreyjaFileReader.o \
	$(BUILDDIR)/FreyjaFileWriter.o \
	$(BUILDDIR)/FreyjaImage.o \
	$(BUILDDIR)/FreyjaLight.o \
	$(BUILDDIR)/FreyjaMesh.o \
	$(BUILDDIR)/FreyjaPakReader.o \
	$(BUILDDIR)/FreyjaSkeleton.o 

$(BUILDDIR)/lib$(NAME)$(SHLIBEXT) : $(PROG_OBJS)
	$(CC) $(CFLAGS) $(SHLIBLDFLAGS) -o $@ $(PROG_OBJS)


##########################################################################
# Image plugins
##########################################################################

PLUGIN_BUILD_DIR=bin/plugins
IMAGE_PLUGIN_BUILD_DIR=$(PLUGIN_BUILD_DIR)/image
MODEL_PLUGIN_BUILD_DIR=$(PLUGIN_BUILD_DIR)/model
IMAGE_PLUGIN_TEST_OBJ=$(IMAGE_PLUGIN_BUILD_DIR)/image_test.o
PLUGINS=$(BUILDDIR)/$(MOD_NAME).so

plug-ins: $(PLUGINS)

bmp.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=bmp \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/bmp.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"
dds.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=dds \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/dds.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

jpg.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=jpg \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/jpeg.o" \
	CFLAGS="$(MODULE_CFLAGS) -DLIB_JPEG" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -ljpeg"

pcx.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=pcx \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/pcx.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

ppm.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=ppm \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/ppm.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

png.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=png \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/png.o" \
	CFLAGS="$(MODULE_CFLAGS) -DLIB_PNG" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lpng -lz"

tga.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=tga \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/tga.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

plugins-image: bmp.so dds.so jpg.so pcx.so ppm.so png.so tga.so


######################################################################
# Model plugins
######################################################################

3ds.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=3ds \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/3ds.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

ase.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=ase \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Ase.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

md2.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md2 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md2.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

md3.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md3 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md3.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm -z defs"

md5.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md5 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md5.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

meshgen.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=meshgen \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/meshgen.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

python.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=python \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/python.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lpython2.3 -z defs"

plugins-model: 3ds.so ase.so md2.so md5.so python.so


######################################################################
# General plugin rules
######################################################################

plugins: plugins-image plugins-model

clean-plugins:
	@-echo -n "Cleaning plugins                             "
	@-rm -f $(IMAGE_PLUGIN_BUILD_DIR)/*.o $(IMAGE_PLUGIN_BUILD_DIR)/*.so
	@-rm -f $(MODEL_PLUGIN_BUILD_DIR)/*.o $(MODEL_PLUGIN_BUILD_DIR)/*.so
	@-echo "[done]"

install-plugins:
	@-echo -n "Installing plugins                           "
	@-mkdir -p $(PLUGIN_INSTALL_DIR)/image
	@-cp $(IMAGE_PLUGIN_BUILD_DIR)/*.so $(PLUGIN_INSTALL_DIR)/image/
	@-mkdir -p $(PLUGIN_INSTALL_DIR)/model
	@-cp $(MODEL_PLUGIN_BUILD_DIR)/*.so $(PLUGIN_INSTALL_DIR)/model/
	@-mkdir -p $(PLUGIN_INSTALL_DIR)/model/python
	@-cp plugins/model/python/*.py $(PLUGIN_INSTALL_DIR)/model/python/
	@-echo "[done]"

$(BUILDDIR)/$(MOD_NAME).so : $(MOD_OBJS)
	$(CC) $(CFLAGS) $(LD_FLAGS) -o $@ $(MOD_OBJS)


##########################################################################
# Unit tests
##########################################################################

TEST=$(BUILDDIR)/$(NAME).test

test: $(TEST)

ase.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=ase BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/Ase.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_ASE $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

jpeg.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test BUILDDIR=$(BUILD_TEST_DIR) \
	NAME=jpeg \
	OBJS="$(BUILD_TEST_DIR)/image_test.o $(BUILD_TEST_DIR)/image_jpeg.o" \
	CFLAGS="-Wall -g -O0 -DLIB_JPEG" \
	LD_FLAGS="-lm -lstdc++ -lhel0 -lfreyja8 -ljpeg"

cull.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=cull BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/cull.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_EGG $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja8"

raw2riff.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=raw2riff BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/raw2riff.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_EGG $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja8"

FreyjaUtil:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test BUILDDIR=$(BUILD_TEST_DIR) \
	NAME=FreyjaUtil \
	OBJS="$(BUILD_TEST_DIR)/FreyjaUtil.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_FREYJAUTIL" \
	LD_FLAGS="-lm -lstdc++ -lhel0 -lfreyja"

python.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test BUILDDIR=$(BUILD_TEST_DIR) \
	NAME=python \
	OBJS="$(BUILD_TEST_DIR)/python.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_PYTHON" \
	LD_FLAGS="-lm -lhel0 -lfreyja -lpython2.3 -lstdc++"

$(BUILDDIR)/$(NAME).test : $(OBJS)
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LD_FLAGS)


##########################################################################
# Object dependency include
##########################################################################

-include depend

##########################################################################

clean: clean-emacs clean-build clean-test clean-obj clean-plugins

clean-test:
	@-echo -n "Cleaning test builds                         "
	@-rm -f $(BUILD_TEST_DIR)/*.test
	@-echo "[done]"

clean-obj:
	@-echo -n "Cleaning objects                             "
	@-rm -f $(BUILD_PROF_DIR)/*.o
	@-rm -f $(BUILD_DEBUG_DIR)/*.o
	@-rm -f $(BUILD_RELEASE_DIR)/*.o
	@-rm -f $(BUILD_TEST_DIR)/*.o
	@-echo "[done]"

clean-emacs:
	@-echo -n "Cleaning emacs files                         "
	@-rm -f `find . -name "*~" -print`
	@-echo "[done]"

clean-build:
	@-echo -n "Cleaning builds                              "
	@-rm -f $(BUILD_PROF_DIR)/lib$(NAME)$(SHLIBEXT)
	@-rm -f $(BUILD_DEBUG_DIR)/lib$(NAME)$(SHLIBEXT)
	@-rm -f $(BUILD_RELEASE_DIR)/lib$(NAME)$(SHLIBEXT)
	@-rm -f $(BUILD_PROF_DIR)/*.so
	@-rm -f $(BUILD_DEBUG_DIR)/*.so
	@-rm -f $(BUILD_RELEASE_DIR)/*.so
	@-rm -f $(BUILD_DEBUG_DIR)/*.test
	@-echo "[done]"


################################################################

install:
	@-echo -n "Installing selected build                     "
	@-cp $(BUILD_INSTALL_DIR)/lib$(NAME)$(SHLIBEXT) $(INSTALL_LIB)
	@-mkdir -p $(INSTALL_LIB)/$(NAME)
	@-echo "[done]"
	@-$(MAKE) install-link
	@-$(MAKE) install-headers
	@-./libsetup.sh $(INSTALL_LIB)

install-link:
	@-echo -n "New soft links                               "
	@-rm -f $(INSTALL_LIB)/lib$(NAME)$(EXT)
	@-ln -s $(INSTALL_LIB)/lib$(NAME)$(SHLIBEXT) \
	$(INSTALL_LIB)/lib$(NAME)$(EXT)
	@-echo "[done]"

install-headers:
	@-echo -n "Installing headers                           "
	@-mkdir -p $(INSTALL_INCLUDE)/$(NAME)
	@-cp -f src/*.h $(INSTALL_INCLUDE)/$(NAME)
	@-echo "[done]"


################################################################

uninstall:
	@-echo -n "Uninstalling                                 " 
	@-rm -f $(INSTALL_LIB)/lib$(NAME)$(EXT)
	@-rm -f $(INSTALL_LIB)/lib$(NAME)$(SHLIBEXT)
	@-rm -f $(INSTALL_BIN)/$(NAME)
	@-rm -rf $(INSTALL_LIB)/$(NAME)
	@-rm -rf $(INSTALL_INCLUDE)/$(NAME)
	@-echo "[done]"


################################################################

tarball:
	@-echo "Making tarball                                  " 
	@-cd .. && tar zcvf $(TARBALL_NAME).tar.gz $(TREE_DIR) \
		--exclude bin --exclude CVS --exclude *~ --exclude contrib \
		--totals
	@-echo "[done]"

backup:
	@-$(MAKE) clean
	@-cd .. && tar Icvf $(NAME)-$(VERSION)-$(BUILD_ID).tar.bz2 \
	$(TREE_DIR) \
	--exclude bin --exclude *~ --totals \
	&& cp $(NAME)-$(VERSION)-$(BUILD_ID).tar.bz2 ~/Backup


##########################################################################

