################################################################
# Mongoose <stu7440@westga.edu>
################################################################
# + Cleaner clean
# + Add new include tree
# + Add new flags
# + Install
################################################################

NAME=hel
MAJOR_VERSION=0
MINOR_VERSION=0
MICRO_VERSION=1
BUILD_ID=20040406
VERSION=$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION)
TREE_DIR=libhel
TARBALL_NAME=lib$(NAME)-$(VERSION).$(BUILD_ID)

################################################################

BUILD_SELECT=debug
INSTALL_INC_DIR=/usr/local/include
INSTALL_LIB_DIR=/usr/local/lib
INSTALL_BIN_DIR=/usr/local/bin
SRC_DIR=hel
API=0

################################################################
# UNIX
CC=gcc
JAVAC=javac
FLAGS=
BUILD_BASE_DIR=bin
EXT=so

########################################
# WIN32
#CC=i586-mingw32msvc-g++
#CPP=i586-mingw32msvc-cpp
#LD=i586-mingw32msvc-ld
#FLAGS=-I/usr/local/include/
#BUILD_BASE_DIR=bin.win32
#EXT=dll

################################################################

BUILD_DEBUG_DIR=$(BUILD_BASE_DIR)/prof
BUILD_DEBUG_DIR=$(BUILD_BASE_DIR)/debug
BUILD_RELEASE_DIR=$(BUILD_BASE_DIR)/release
BUILD_TEST_DIR=$(BUILD_BASE_DIR)/test
BUILD_INSTALL_DIR=$(BUILD_BASE_DIR)/$(BUILD_SELECT)

################################################################
DEBUG_DEFS=-DDEBUG -DEXPERIMENTAL

BASE_CFLAGS=$(FLAGS) -Wall -I. -I../libhel/ \
		-DVERSION=\"\\\"$(VERSION)\\\"\" \
		-DBUILD_ID=\"\\\"$(BUILD_ID)\\\"\" \
		-DPROGRAM_NAME=\"\\\"$(NAME)-$(VERSION)-$(BUILD_ID)\\\"\"

LD_FLAGS=-lm -shared -fPIC

RELEASE_CFLAGS=$(BASE_CFLAGS) \
	-ffast-math -funroll-loops \
	-fomit-frame-pointer -fexpensive-optimizations -O2

DEBUG_CFLAGS=$(BASE_CFLAGS) -g $(DEBUG_DEFS)

BASE_DEFS=-I$(SRC_DIR)

DO_CC=$(CC) $(CFLAGS) -o $@ -c $<

################################################################


TARGETS=$(BUILDDIR)/lib$(NAME)$(API).$(EXT).$(VERSION)

auto: $(BUILD_SELECT)

################################################################

release:
	@-mkdir -p $(BUILD_RELEASE_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_RELEASE_DIR) \
	CFLAGS="$(RELEASE_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

debug:
	@-mkdir -p $(BUILD_DEBUG_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_DEBUG_DIR) \
	CFLAGS="$(DEBUG_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

prof: 
	@-mkdir -p $(BUILD_PROF_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_PROF_DIR) \
	CFLAGS="$(DEBUG_CFLAGS) -pg" \
	LD_FLAGS="$(LD_FLAGS) -pg"

depend:
	@-echo -n Making deps...
	@-echo "# Autogenerated dependency file" > depend
	@-find $(SRC_DIR) -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) {} \; >> depend
	@-echo "       [done]"

########################################################################

all: debug release prof

########################################################################

targets: $(TARGETS)

OBJS = \
	$(BUILDDIR)/ViewVolume.o \
	$(BUILDDIR)/Simulation.o \
	$(BUILDDIR)/Spring.o \
	$(BUILDDIR)/Mass.o \
	$(BUILDDIR)/CollisionObject.o \
	$(BUILDDIR)/BoundingVolume.o \
	$(BUILDDIR)/Vector3d.o \
	$(BUILDDIR)/Matrix.o \
	$(BUILDDIR)/Quaternion.o \
	$(BUILDDIR)/math.o

$(BUILDDIR)/lib$(NAME)$(API).$(EXT).$(VERSION) : $(OBJS) 
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LD_FLAGS)

################################################################

-include depend

################################################################

clean:
	@-rm -f depend

	@-echo -n "Cleaning emacs files                        "
	@-rm -f `find . -name "*~" -print`
	@-echo "[done]"

	@-echo -n "Cleaning profiling output                   "
	@-rm -f gmon.out
	@-echo "[done]"

	@-echo -n "Cleaning TEST builds                        "
	@-rm -f $(BUILD_TEST_DIR)/*.test
	@-echo "[done]"

	@-echo -n "Cleaning DEBUG builds                       "
	@-rm -f $(BUILD_DEBUG_DIR)/*.o
	@-rm -f $(BUILD_DEBUG_DIR)/$(NAME)
	@-echo "[done]"

	@-echo -n "Cleaning PROF builds                        "
	@-rm -f $(BUILD_PROF_DIR)/*.o
	@-rm -f $(BUILD_PROF_DIR)/$(NAME)
	@-echo "[done]"

	@-echo -n "Cleaning RELEASE builds                     "
	@-rm -f $(BUILD_RELEASE_DIR)/*.o
	@-rm -f $(BUILD_RELEASE_DIR)/$(NAME)
	@-echo "[done]"


################################################################

install: install-lib install-headers

################################################################

install-bin:
	@-echo -n "Installing bin                              "
	@-cp $(BUILD_INSTALL_DIR)/$(NAME) $(INSTALL_BIN_DIR)
	@-echo "[done]"


install-lib:
	@-echo -n "Installing lib                              "
	@-cp $(BUILD_INSTALL_DIR)/lib$(NAME)$(API).$(EXT).$(VERSION) \
		$(INSTALL_LIB_DIR)
	@-ln -sf $(INSTALL_LIB_DIR)/lib$(NAME)$(API).$(EXT).$(VERSION) \
		$(INSTALL_LIB_DIR)/lib$(NAME)$(API).$(EXT)
	./libsetup.sh
	@-echo "[done]"

install-headers:
	@-echo -n "Installing headers                          "
	@-mkdir -p $(INSTALL_INC_DIR)/$(SRC_DIR)
	@-cp -f $(SRC_DIR)/*.h $(INSTALL_INC_DIR)/$(SRC_DIR)/
	@-echo "[done]"

################################################################

uninstall-lib:
	@-echo -n "Uninstalling                                "
	@-rm -f $(INSTALL_DIR)/lib$(NAME)$(API).$(EXT).$(VERSION)
	@-echo "[done]"

################################################################

tarball:
	@-$(MAKE) clean
	@-cd .. && tar zcvf $(TARBALL_NAME).tar.gz $(TREE_DIR) \
		--exclude bin --exclude *~ \
		--exclude CVS --exclude *.notar --exclude spec \
		--exclude *.log --exclude contrib \
		--totals
	@-echo "[done]"

backup:
	@-$(MAKE) clean
	@-cd .. && tar Icvf $(NAME)-$(VERSION)-$(BUILD_ID).tar.bz2 $(TREE_DIR)
	@-echo "[done]"

################################################################

test:
	@-echo "No test build rule made"
	@-echo "[done]"

