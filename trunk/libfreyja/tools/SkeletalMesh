
 SkeletalMesh spec v0.1


 This example uses the pak object:

 FDarkElf_m000_g	SkeletalMesh	2329 (0x919)	45716	0x0535B439

 ---------------------------------------------------------------------

 Unknown 

 Index ? = 66 @ 24

 float[10] @ 26 - 64  ??

 Index ? = 63 @ 64

 Unknown

 Index faceCount = 268 @ 89 // Seems to always be at this offset or will be 0

 short[268] @ 91 - 627

 Unknown

 Index vertexCount = 142 @ 2895

 'fff'? 'sbfff'? ( normals ? ) @ 2897 - ?

 
 'sff'[28] @ 35252 - 35532 ??

 Index? = 16 @ 35536 ??
 
 'ssss'[16] @ 35537 - 35665 ??

 Index = 27 @ 35661  ??

 'ff'[44] @ 35661 - 35846  ??

 Index? = 14 @ 35846 ?? 

 byte[14] @ 35847 - 35861 ??
 
 Unknown @ 35861 - 35867

 // Mesh

 Index vertexCount = 142 @ 35867

 float height? = 14.28593 @ 35869

 Verices 'VXfZfY' @ 35873 - 37577

 Index wedgeCount = 212 @ 37577

 Wedges 'WIsUfVf' @ 37579 - 39699

 Unknown 4 bytes (0xc65b3605) @ 39699

 Index faceCount = 268 @ 39703
 
 Faces 'FAsBsCsMbSbGu' @ 39705 - 42921

 Unknown 4 bytes (0xdc623605) @ 42921

 Index float pairs for uv or weights? = 226 @ 42925

 float pairs 'ff' @ 42927 - 44735

 Unknown 4 bytes (0x8a643605) @ 44735

 Index something for wedges/weights/transparency? = 212 @ 44739

 w/w/t? @ 44741 - ?




 Unknown @ ? - 45715

 


 -----------------------------------------------------------------------

 Vertices are stored in this grammer: VXfZfY

 which would generate a C structure like:

 vertex {
  float X
  float Z
  float Y
 }

 Wedges are stored in this grammer: WIsUfVf

 which would generate a C structure like:

 wedge {
  short vertexindex
  float U
  float V
 }

 Faces are stored in this grammer: FAsBsCsMbSbGu

 which would generate a C structure like:

 Face {
  short wedge_indices[3]  // ABC
  char materialid
  char shaderid
  uint32 smoothinggroup
 } 



