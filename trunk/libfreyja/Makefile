################################################################
# Mongoose <mongoose@icculus.org>
################################################################
# + Cleaner clean
# + Add new include tree
# + Add new flags
# + Install/Uninstall
# + Lots of misc new features
################################################################

NAME=libfreyja
BASE_NAME=freyja
MAJOR_VERSION=0
MINOR_VERSION=9
MICRO_VERSION=3
BRANCH=
BUILD_ID=20050822
VERSION=$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION)$(BRANCH)
BUILD_HOST=`uname -n -m -s`
WEBSITE="http://icculus.org/freyja"
EMAIL="mongoose@icculus.org"
EXT=.so
TREE_DIR=libfreyja
TARBALL_NAME=$(NAME)-$(VERSION).$(BUILD_ID)$(BRANCH)
LICENSE=LGPL

################################################################

BUILD_SELECT=debug
BASE_DEFS=-DMODEL_PLUGINS
DEBUG_DEFS=-DDEBUG -DEXPERIMENTAL
CONFIGURE_DEF=-DFREYJAIMAGE_PLUGINS -DFREYJA_PLUGINS -DBONE_0_9_3_API
CONFIGURE_LNK=

################################################################

CC=gcc

################################################################

BUILD_DEBUG_DIR=bin/debug
BUILD_RELEASE_DIR=bin/release
BUILD_PROF_DIR=bin/prof
BUILD_WIN32_DIR=bin/win32
BUILD_TEST_DIR=bin/test
BUILD_INSTALL_DIR=bin/$(BUILD_SELECT)

SRC_DIR=src

DESTDIR =
NO_DEB=
NO_DEB=local/
INSTALL_BIN=$(DESTDIR)/usr/$(NO_DEB)bin
INSTALL_LIB=$(DESTDIR)/usr/$(NO_DEB)lib
INSTALL_DOC=$(DESTDIR)/usr/share/doc/$(NAME)
INSTALL_SHARE=$(DESTDIR)/usr/share/$(NAME)
INSTALL_INCLUDE=$(DESTDIR)/usr/$(NO_DEB)include
INSTALL_PLUGIN_DIR=$(INSTALL_LIB)/$(BASE_NAME)/modules


################################################################
# Debian package setup
################################################################

DEB_DIR=/tmp/$(NAME).deb
NAME_DEB=$(NAME)
VERSION_DEB=$(VERSION).$(BUILD_ID)
# Package types: -s single bin, -l single lib, -m multiple bins
FLAGS_DEB=-s


################################################################

BASE_CFLAGS=-Wall -I$(SRC_DIR) \
	$(CONFIGURE_DEF) \
	-DPLUGIN_IMAGE_DIR=\"\\\"$(INSTALL_PLUGIN_DIR)/image\\\"\" \
	-DVERSION=\"\\\"$(VERSION)-$(BUILD_ID)\\\"\" \
	-DPROJECT_URL=\"\\\"$(WEBSITE)\\\"\" \
	-DEMAIL_ADDRESS=\"\\\"$(EMAIL)\\\"\" \
	$(BASE_DEFS)

LDFLAGS=$(CONFIGURE_LNK) -lm -ldl
#LDFLAGS += -Wl,-z,defs
#LDFLAGS += -Wl,-O1
RELEASE_CFLAGS=$(BASE_CFLAGS) -ffast-math -funroll-loops \
	-fomit-frame-pointer -fexpensive-optimizations -O2
DEBUG_CFLAGS=$(BASE_CFLAGS) -g $(DEBUG_DEFS)

SHLIBEXT=$(EXT).$(VERSION)
SHLIBLDFLAGS=$(LDFLAGS) -fPIC -shared

MODULE_CFLAGS=$(BASE_CFLAGS) -g -DFREYJA_PLUGINS
MODULE_LD_FLAGS=-lfreyja -lstdc++ -shared -fPIC -ldl -rdynamic 
#MODULE_LD_FLAGS += --warn-unresolved-symbols -Wl -z defs
MODULE_LD_FLAGS += --warn-unresolved-symbols -Wl

################################################################

DO_CC=$(CC) $(CFLAGS) -o $@ -c $<
DO_SHLIB_CC=$(CC) $(CFLAGS) $(SHLIBCFLAGS) -o $@ -c $<

TARGETS=$(BUILDDIR)/$(NAME)$(SHLIBEXT)
TESTS=$(BUILDDIR)/$(NAME).test


################################################################
# Build rules
################################################################

auto: $(BUILD_SELECT)

all: debug release prof

debug:
	@-mkdir -p $(BUILD_DEBUG_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_DEBUG_DIR) \
	CFLAGS="$(DEBUG_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

prof:
	@-mkdir -p $(BUILD_PROF_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_PROF_DIR) \
	CFLAGS="$(DEBUG_CFLAGS) -pg" \
	LD_FLAGS="$(LD_FLAGS) -pg"

release:
	@-mkdir -p $(BUILD_RELEASE_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_RELEASE_DIR) \
	CFLAGS="$(RELEASE_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

win32:
	@-mkdir -p $(BUILD_WIN32_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_WIN32_DIR) \
	NAME="freyja9" \
	MODULE="freyja9" \
	SHLIBEXT=".dll" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(BASE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(CONFIGURE_LNK) -lm" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0"


################################################################
# Include Dependences
################################################################

depend-tools:
	@-find ./tools -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) {} \; >> depend

depend-plugins:
	@-find ./plugins/image -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) {} \; >> depend
	@-find ./plugins/model -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) {} \; >> depend

depend:
	@-echo -n Making deps...
	@-echo "# Autogenerated dependency file" > depend
	@-find ./src -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) {} \; >> depend
	@-echo "       [done]"
	$(MAKE) depend-plugins
	$(MAKE) depend-tools


################################################################
# Main targets and objects
################################################################

targets: $(TARGETS)

PROG_OBJS = \
	$(BUILDDIR)/Action.o \
	$(BUILDDIR)/Bone.o \
	$(BUILDDIR)/CopyModel.o \
	$(BUILDDIR)/Egg.o \
	$(BUILDDIR)/FreyjaScene.o \
	$(BUILDDIR)/FreyjaFSM.o \
	$(BUILDDIR)/FreyjaPluginABI.o \
	$(BUILDDIR)/FreyjaPlugin.o \
	$(BUILDDIR)/FreyjaCamera.o \
	$(BUILDDIR)/FreyjaPrinter.o \
	$(BUILDDIR)/FreyjaFileReader.o \
	$(BUILDDIR)/FreyjaFileWriter.o \
	$(BUILDDIR)/FreyjaImage.o \
	$(BUILDDIR)/FreyjaLight.o \
	$(BUILDDIR)/FreyjaMesh.o \
	$(BUILDDIR)/FreyjaMaterial.o \
	$(BUILDDIR)/FreyjaPakReader.o \
	$(BUILDDIR)/FreyjaTexture.o \
	$(BUILDDIR)/FreyjaUtil.o \
	$(BUILDDIR)/PerlinNoise.o \
	$(BUILDDIR)/RenderModel.o \
	$(BUILDDIR)/RigidBody.o \
	$(BUILDDIR)/Skeleton.o

$(BUILDDIR)/$(NAME)$(SHLIBEXT) : $(PROG_OBJS)
	$(CC) $(CFLAGS) $(SHLIBLDFLAGS) -o $@ $(PROG_OBJS)

$(BUILDDIR)/$(MODULE).dll : $(PROG_OBJS)
	$(CC) -shared -o $(BUILDDIR)/$(MODULE).dll \
	-Wl,--out-implib=$(BUILDDIR)/lib$(MODULE).a \
	-Wl,--export-all-symbols \
	-Wl,--enable-auto-import \
	-Wl,--whole-archive $(PROG_OBJS) \
	-Wl,--no-whole-archive $(LIBS)


##########################################################################
# Image plugins
##########################################################################

PLUGIN_BUILD_DIR=bin/plugins
IMAGE_PLUGIN_BUILD_DIR=$(PLUGIN_BUILD_DIR)/image
MODEL_PLUGIN_BUILD_DIR=$(PLUGIN_BUILD_DIR)/model
IMAGE_PLUGIN_TEST_OBJ=$(IMAGE_PLUGIN_BUILD_DIR)/image_test.o
PLUGINS=$(BUILDDIR)/$(MOD_NAME).so
PLUGINSWIN32=$(BUILDDIR)/$(MOD_NAME).dll

plug-ins: $(PLUGINS)
plug-ins-win32: $(PLUGINSWIN32)

bmp.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=bmp \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/bmp.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

bmp.dll:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=bmp \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/bmp.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

dds.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=dds \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/dds.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

dds.dll:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=dds \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/dds.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

jpg.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=jpg \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/jpeg.o" \
	CFLAGS="$(MODULE_CFLAGS) -DLIB_JPEG" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -ljpeg"

CROSS_INC=/home/mongoose/Projects/win32/include
CROSS_LIB=/home/mongoose/Projects/win32/lib
CROSS_BIN=/home/mongoose/Projects/win32/bin

jpg.dll:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=jpg \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/jpeg.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -DLIB_JPEG -I/usr/local/include/ -I$(CROSS_INC)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9 -L$(CROSS_LIB) -ljpeg"

pcx.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=pcx \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/pcx.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

pcx.dll:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=pcx \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/pcx.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

ppm.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=ppm \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/ppm.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

ppm.dll:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=ppm \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/ppm.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

png.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=png \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/png.o" \
	CFLAGS="$(MODULE_CFLAGS) -DLIB_PNG" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lpng -lz"

png.dll:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=png \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/png.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -DLIB_PNG -I/usr/local/include/ -I$(CROSS_INC)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9 -L$(CROSS_LIB) -lpng"

tga.so:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=tga \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/tga.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

tga.dll:
	@-mkdir -p $(IMAGE_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(IMAGE_PLUGIN_BUILD_DIR) \
	MOD_NAME=tga \
	MOD_OBJS="$(IMAGE_PLUGIN_BUILD_DIR)/tga.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

plugins-image: bmp.so dds.so jpg.so pcx.so ppm.so png.so tga.so

plugins-image-win32: dds.dll bmp.dll pcx.dll ppm.dll tga.dll jpg.dll png.dll

######################################################################
# Model plugins
######################################################################

3ds.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=3ds \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/3ds.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

3ds.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=3ds \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/3ds.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

bsa.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=bsa \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/BSAPakReader.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

bsa.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=ase \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/BSAPakReader.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

ase.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=ase \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Ase.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

ase.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=ase \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Ase.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

eggv7.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=eggv7 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/eggv7.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

eggv7.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=eggv7 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/eggv7.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

eggv8.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=eggv8 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/eggv8.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

eggv8.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=eggv8 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/eggv8.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

et.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=et \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/ETModel.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

et.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=et \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/ETModel.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

glm.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=glm \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/GLMModel.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

glm.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=glm \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/GLMModel.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

grn.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=grn \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/freyja_grn.o \
			$(MODEL_PLUGIN_BUILD_DIR)/grannyfile.o \
			$(MODEL_PLUGIN_BUILD_DIR)/GrannyStream.o \
			$(MODEL_PLUGIN_BUILD_DIR)/grnanim.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnbones.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnboneties.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnitemlist.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnmatrix.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnmeshes.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnobjects.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grntextchunk.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grntextureinfos.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grntextures.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnunhandled.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

grn.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=grn \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/freyja_grn.o \
			$(MODEL_PLUGIN_BUILD_DIR)/grannyfile.o \
			$(MODEL_PLUGIN_BUILD_DIR)/GrannyStream.o \
			$(MODEL_PLUGIN_BUILD_DIR)/grnanim.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnbones.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnboneties.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnitemlist.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnmatrix.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnmeshes.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnobjects.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grntextchunk.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grntextureinfos.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grntextures.o  \
			$(MODEL_PLUGIN_BUILD_DIR)/grnunhandled.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

grnX.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=grnX \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/GRNModel.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

halflifeX.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=halflifeX \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/MDLModel.o \
			$(MODEL_PLUGIN_BUILD_DIR)/MathLib.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

halflife.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=halflife \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/HalfLife.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

lwo.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=lwo \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Lwo.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

lwo.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=lwo \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Lwo.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

mdl.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=mdl \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Mdl.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

mdl.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=mdl \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Mdl.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

md2.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md2 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md2.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS)"

md2.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md2 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md2.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

md3.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md3 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md3.o" \
	CFLAGS="$(MODULE_CFLAGS) -DMD3_EXPORT_ENABLED" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

md3.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md3 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md3.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

md3anim.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md3 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md3Anim.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

md5.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md5 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md5.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

md5.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=md5 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Md5.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

meshgen.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=meshgen \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/meshgen.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

milkshape.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=milkshape \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/milkshape.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

nif4.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=nif4 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Nif4.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm -lhel0"

nif4.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=nif4 \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Nif4.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

nod.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=nod \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Nod.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm -lhel0"

nod.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=nod \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Nod.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

nwnascii.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=nwnascii \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/nwnascii.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

obj.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=obj \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/obj.o" \
	CFLAGS="$(MODULE_CFLAGS) -DOBJ_EXPORT_ENABLED" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

obj.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=obj \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/obj.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

psk.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=psk \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/PSKModel.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

psk.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=psk \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/PSKModel.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

python.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=python \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/python.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lpython2.3"
# -z defs

sims.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=sims \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Sims.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

skel.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=skel \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/Skel.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

skn.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=skn \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/skn.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

smd.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=smd \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/smd.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"

smd.dll:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins-win32 BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=smd \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/smd.o" \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(MODULE_CFLAGS) -I/usr/local/include/" \
	LD_FLAGS="$(MODULE_LD_FLAGS)" \
	LIBS="-lstdc++ -lm -L/usr/local/lib -lhel0 -lfreyja9"

tombraider.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=tombraider \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/TombRaider.o \
			$(MODEL_PLUGIN_BUILD_DIR)/tombraider.o" \
	CFLAGS="$(MODULE_CFLAGS) -DZLIB_SUPPORT" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lz -lm"

trmesh.so:
	@-mkdir -p $(MODEL_PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILDDIR=$(MODEL_PLUGIN_BUILD_DIR) \
	MOD_NAME=trmesh \
	MOD_OBJS="$(MODEL_PLUGIN_BUILD_DIR)/freyja_trmesh.o" \
	CFLAGS="$(MODULE_CFLAGS)" \
	LD_FLAGS="$(MODULE_LD_FLAGS) -lm"


plugins-model-exp: eggv8.so grnX.so halflifeX.so md3anim.so nif3.so tombraider.so 

plugins-model: 3ds.so ase.so eggv7.so halflife.so et.so glm.so grn.so lwo.so mdl.so md2.so md3.so md5.so milkshape.so nif4.so nwnascii.so nod.so psk.so obj.so skel.so skn.so sims.so smd.so trmesh.so grn.so python.so

plugins-model-win32: 3ds.dll bsa.dll ase.dll eggv7.dll et.dll glm.dll grn.dll mdl.dll md2.dll md3.dll md5.dll nif4.dll lwo.dll nod.dll obj.dll psk.dll smd.dll

tools: freyjautil.test bsa.test raw2riff.test cull.test freyjaimageutil.test


######################################################################
# General plugin rules
######################################################################

plugins: plugins-image plugins-model tools

plugins-win32: plugins-image-win32 plugins-model-win32

clean-plugins:
	@-echo -n "Cleaning plugins                             "
	@-rm -f $(IMAGE_PLUGIN_BUILD_DIR)/*.o $(IMAGE_PLUGIN_BUILD_DIR)/*.so
	@-rm -f $(MODEL_PLUGIN_BUILD_DIR)/*.o $(MODEL_PLUGIN_BUILD_DIR)/*.so
	@-rm -f $(IMAGE_PLUGIN_BUILD_DIR)/*.o $(IMAGE_PLUGIN_BUILD_DIR)/*.dll
	@-rm -f $(MODEL_PLUGIN_BUILD_DIR)/*.o $(MODEL_PLUGIN_BUILD_DIR)/*.dll
	@-echo "[done]"

install-plugins:
	@-echo -n "Installing plugins                           "
	@-mkdir -p $(INSTALL_PLUGIN_DIR)/image
	@-cp $(IMAGE_PLUGIN_BUILD_DIR)/*.so $(INSTALL_PLUGIN_DIR)/image/
	@-mkdir -p $(INSTALL_PLUGIN_DIR)/model
	@-cp $(MODEL_PLUGIN_BUILD_DIR)/*.so $(INSTALL_PLUGIN_DIR)/model/
	@-mkdir -p $(INSTALL_PLUGIN_DIR)/model/python
	@-cp plugins/model/python/*.py $(INSTALL_PLUGIN_DIR)/model/python/
	@-echo "[done]"

install-plugins-win32:
	@-echo -n "Installing plugins                           "
	@-mkdir -p $(INSTALL_PLUGIN_DIR)/image
	@-cp $(IMAGE_PLUGIN_BUILD_DIR)/*.dll $(INSTALL_PLUGIN_DIR)/image/
	@-mkdir -p $(INSTALL_PLUGIN_DIR)/model
	@-cp $(MODEL_PLUGIN_BUILD_DIR)/*.dll $(INSTALL_PLUGIN_DIR)/model/
	@-echo "[done]"

install-tools:
	@-cp bin/test/freyjautil.test $(INSTALL_BIN)/freyjautil
	@-cp bin/test/bsa.test $(INSTALL_BIN)/bsa
	@-cp bin/test/cull.test $(INSTALL_BIN)/cull
	@-cp bin/test/raw2riff.test $(INSTALL_BIN)/raw2riff
	@-cp bin/test/freyjaimageutil.test $(INSTALL_BIN)/freyjaimageutil

$(BUILDDIR)/$(MOD_NAME).so : $(MOD_OBJS)
	$(CC) $(CFLAGS) $(LD_FLAGS) -o $@ $(MOD_OBJS)

$(BUILDDIR)/$(MOD_NAME).dll : $(MOD_OBJS)
	$(CC) -shared -o $(BUILDDIR)/$(MOD_NAME).dll \
	-Wl,--out-implib=$(BUILDDIR)/lib$(MOD_NAME).a \
	-Wl,--export-all-symbols \
	-Wl,--enable-auto-import \
	-Wl,--whole-archive $(MOD_OBJS) \
	-Wl,--no-whole-archive $(LIBS)

##########################################################################
# Unit tests
##########################################################################

TEST=$(BUILDDIR)/$(NAME).test

test: $(TEST)

##########################################################################

SDLUNIT_CFLAGS=$(BASE_CFLAGS) $(shell sdl-config --cflags) \
		-DHAVE_SDL -DHAVE_OPENGL -DHAVE_SDL_TTF -DHAVE_FREYJA
SDLUNIT_LDFLAGS=$(shell sdl-config --libs) -lSDL_ttf -lGL -lGLU -lm -lstdc++ \
		-lhel0 -lfreyja
SDLUNIT_OBJS=$(BUILD_TEST_DIR)/SDLUnitTest.o

##########################################################################

Md3AnimModel.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=Md3AnimModel BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(SDLUNIT_OBJS) $(BUILD_TEST_DIR)/Md3.o $(BUILD_TEST_DIR)/Md3AnimModel.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_MD3ANIMMODEL $(SDLUNIT_CFLAGS)" \
	LD_FLAGS="$(SDLUNIT_LDFLAGS)"

PSKModel.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=PSKModel BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(SDLUNIT_OBJS) $(BUILD_TEST_DIR)/PSKModel.o $(BUILD_TEST_DIR)/UTPackage.o $(BUILD_TEST_DIR)/URTexture.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_PSKMODEL -DHAVE_UTPACKAGE $(SDLUNIT_CFLAGS)" \
	LD_FLAGS="$(SDLUNIT_LDFLAGS)"

MDLModel.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=MDLModel BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(SDLUNIT_OBJS) $(BUILD_TEST_DIR)/MDLModel.o $(BUILD_TEST_DIR)/MathLib.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_MDLMODEL $(SDLUNIT_CFLAGS)" \
	LD_FLAGS="$(SDLUNIT_LDFLAGS)"

##########################################################################

ase.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=ase BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/Ase.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_ASE $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

bsa.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=bsa BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/BSAPakReader.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_BSAPAKREADER $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

glm.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=glm BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/GLMModel.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_GLMMODEL $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

md5.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=md5 BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/Md5.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_MD5 $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

nod.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=nod BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/Nod.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_NOD $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

jpeg.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test BUILDDIR=$(BUILD_TEST_DIR) \
	NAME=jpeg \
	OBJS="$(BUILD_TEST_DIR)/image_test.o $(BUILD_TEST_DIR)/image_jpeg.o" \
	CFLAGS="-Wall -g -O0 -DLIB_JPEG" \
	LD_FLAGS="-lm -lstdc++ -lhel0 -lfreyja -ljpeg"

freyjaimageutil.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=freyjaimageutil BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/freyjaimageutil.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_DDS2TGA $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

cull.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=cull BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/cull.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_CULL $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

raw2riff.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=raw2riff BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/raw2riff.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_EGG $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

freyjautil.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test BUILDDIR=$(BUILD_TEST_DIR) \
	NAME=freyjautil \
	OBJS="$(BUILD_TEST_DIR)/freyjautil.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_FREYJAUTIL" \
	LD_FLAGS="-lm -lstdc++ -lhel0 -lfreyja"

cycle-win32: win32 install-win32 test-win32

test-win32: freyjautil-win32.test

freyjautil-win32.test:
	mkdir -p $(BUILD_TEST_DIR)
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	CFLAGS="$(DEBUG_CFLAGS) -I/usr/local/include/" \
	i586-mingw32msvc-g++ -mms-bitfields \
		-Wall -g -pipe -O0 -I/usr/local/include/ \
		tools/freyjautil.cpp \
		-o $(BUILD_TEST_DIR)/freyjautil-win32.test \
		-lstdc++ -L/usr/local/lib/ -lhel0 -lfreyja9 

python.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test BUILDDIR=$(BUILD_TEST_DIR) \
	NAME=python \
	OBJS="$(BUILD_TEST_DIR)/python.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_PYTHON" \
	LD_FLAGS="-lm -lhel0 -lfreyja -lpython2.3 -lstdc++"

UTPackage.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=UTPackage BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/UTPackage.o $(BUILD_TEST_DIR)/URTexture.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_UTPACKAGE -DHAVE_FREYJA $(BASE_CFLAGS)" \
	LD_FLAGS="-lm -ldl -lstdc++ -lhel0 -lfreyja"

lineageIIextract.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	$(MAKE) test NAME=lineageIIextract BUILDDIR=$(BUILD_TEST_DIR) \
	OBJS="$(BUILD_TEST_DIR)/extractFace.o" \
	CFLAGS="-Wall -g -O0 -DUNIT_TEST_UTPACKAGE -DHAVE_FREYJA $(BASE_CFLAGS)" \
	LD_FLAGS="-lstdc++"
	

PerlinNoise.test:
	mkdir -p $(BUILD_TEST_DIR)
	$(CC) -Wall -g -pipe -O0 -lstdc++ -Isrc \
		-DUNIT_TEST_PERLINNOISE \
		plugins/image/tga.cpp \
		src/PerlinNoise.cpp -o $(BUILD_TEST_DIR)/PerlinNoise.test

#################################################################

$(BUILDDIR)/$(NAME).test : $(OBJS)
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LD_FLAGS)


##########################################################################
# Object dependency include
##########################################################################

-include depend

##########################################################################

clean: clean-emacs clean-build clean-test clean-obj clean-plugins clean-win32

clean-test:
	@-echo -n "Cleaning test builds                         "
	@-rm -f $(BUILD_TEST_DIR)/*.test
	@-echo "[done]"

clean-obj:
	@-echo -n "Cleaning objects                             "
	@-rm -f $(BUILD_PROF_DIR)/*.o
	@-rm -f $(BUILD_DEBUG_DIR)/*.o
	@-rm -f $(BUILD_RELEASE_DIR)/*.o
	@-rm -f $(BUILD_TEST_DIR)/*.o
	@-echo "[done]"

clean-win32:
	@-echo -n "Cleaning WIN32 builds                        "
	@-rm -f $(BUILD_WIN32_DIR)/*.o
	@-rm -f $(BUILD_WIN32_DIR)/$(NAME)
	@-echo "[done]"

clean-emacs:
	@-echo -n "Cleaning emacs files                         "
	@-rm -f `find . -name "*~" -print`
	@-echo "[done]"

clean-build:
	@-echo -n "Cleaning builds                              "
	@-rm -f $(BUILD_PROF_DIR)/$(NAME)$(SHLIBEXT)
	@-rm -f $(BUILD_DEBUG_DIR)/$(NAME)$(SHLIBEXT)
	@-rm -f $(BUILD_RELEASE_DIR)/$(NAME)$(SHLIBEXT)
	@-rm -f $(BUILD_PROF_DIR)/*.so
	@-rm -f $(BUILD_DEBUG_DIR)/*.so
	@-rm -f $(BUILD_RELEASE_DIR)/*.so
	@-rm -f $(BUILD_DEBUG_DIR)/*.test
	@-echo "[done]"


#################################################################

clean-deb:
	@-echo -n "Cleaning DEBs                                "
	@-rm -rf $(DEB_DIR)
	@-echo "[DONE]"

debian-package:
	$(MAKE) clean
	$(MAKE) clean-deb
	$(MAKE) tarball
	mkdir -p $(DEB_DIR)
	cp ../$(NAME_DEB)-$(VERSION_DEB).tar.gz $(DEB_DIR)
	cd $(DEB_DIR) && tar zxvf $(NAME_DEB)-$(VERSION_DEB).tar.gz && mv $(TREE_DIR) $(NAME_DEB)-$(VERSION_DEB) && cd $(NAME_DEB)-$(VERSION_DEB) && make deb-init && make deb

deb-init:
	dh_make -c $(LICENSE) $(FLAGS_DEB) -e $(EMAIL) -f ../$(NAME_DEB)-$(VERSION_DEB).tar.gz
	@-cp debian/control debian/control.old
	@-sed -e "s/<insert up to 60 chars description>/Freyja backbone/g" debian/control.old > debian/control
	@-rm -f debian/control.old
	@-cp debian/control debian/control.old
	@-sed -e "s/<insert long description, indented with spaces>/3d Modeler./g" debian/control.old > debian/control
	@-rm -f debian/control.old

deb:
	dpkg-buildpackage -rfakeroot

################################################################

install:
	@-echo -n "Installing selected build                     "
	@-mkdir -p $(INSTALL_LIB)
	@-mkdir -p $(INSTALL_LIB)/$(BASE_NAME)
	@-cp $(BUILD_INSTALL_DIR)/$(NAME)$(SHLIBEXT) $(INSTALL_LIB)
	@-echo "[done]"
	@-$(MAKE) install-link
	@-$(MAKE) install-headers
	@-./libsetup.sh $(INSTALL_LIB)
	@-echo $(MAKE) plugins
	@-echo $(MAKE) install-plugins
	@-echo $(MAKE) tools
	@-echo $(MAKE) install-tools

install-win32:
	@-echo -n "Installing win32 build                   "
	@-cp $(BUILD_WIN32_DIR)/*.a $(BUILD_WIN32_DIR)/*.dll $(INSTALL_LIB)
	@-echo "[done]"

install-link:
	@-echo -n "New soft links                               "
	@-cd $(INSTALL_LIB) && ln -sf $(NAME)$(SHLIBEXT) $(NAME)$(EXT)
	@-echo "[done]"

install-headers:
	@-echo -n "Installing headers                           "
	@-mkdir -p $(INSTALL_INCLUDE)/$(BASE_NAME)
	@-cp -f src/*.h $(INSTALL_INCLUDE)/$(BASE_NAME)
	@-echo "[done]"


################################################################

uninstall:
	@-echo -n "Uninstalling                                 " 
	@-rm -f $(INSTALL_LIB)/$(NAME)$(EXT)
	@-rm -f $(INSTALL_LIB)/$(NAME)$(SHLIBEXT)
	@-rm -f $(INSTALL_BIN)/$(BASE_NAME)
	@-rm -rf $(INSTALL_LIB)/$(BASE_NAME)
	@-rm -rf $(INSTALL_INCLUDE)/$(BASE_NAME)
	@-echo "[done]"


################################################################

tarball:
	@-echo "Making tarball                                  " 
	@-cd .. && tar zcvf $(TARBALL_NAME).tar.gz  \
		--exclude=bin --exclude=.svn --exclude=*~ --exclude=contrib \
		--totals \
		$(TREE_DIR)
	@-echo "[done]"

backup:
	@-$(MAKE) clean
	@-cd .. && tar Icvf $(NAME)-$(VERSION)-$(BUILD_ID).tar.bz2 \
	$(TREE_DIR) \
	--exclude bin --exclude *~ --totals \
	&& cp $(NAME)-$(VERSION)-$(BUILD_ID).tar.bz2 ~/Backup


##########################################################################

