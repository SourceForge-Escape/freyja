/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
/*===========================================================================
 * 
 * Project : freyja
 * Author  : Terry 'Mongoose' Hendrix II
 * Website : http://www.icculus.org/freyja/
 * Email   : mongooseichiban@gmail.com
 * Object  : 
 * License : No use w/o permission (C) 2004-2006 Mongoose
 * Comments: This is the Python plugin ABI.
 *
 *           This file was generated by Mongoose's UpdateBindings.py
 *           - Mongoose <mongooseichiban@gmail.com>
 *
 * 2007.12.28:
 * Mongoose - Generated, Based on C ABI for freyja
 ==========================================================================*/

#include "SkeletonABI.h"
#include "BoneABI.h"
#include "LightABI.h"
#include "MaterialABI.h"
#include "PakABI.h"
#include "MeshABI.h"
#include "CameraABI.h"
#include "NodeABI.h"
#include "SceneNodeABI.h"
#include "SceneABI.h"
#include "FileABI.h"
#include "PixelBufferABI.h"
#include "freyja.h"
#include "PythonABI.h"
#ifdef USING_PYTHON
#include <python2.4/Python.h>


PyObject *py_freyjaSkeletonCreate(PyObject *self, PyObject *args)
{
	char* name;

	if (!PyArg_ParseTuple(args, "s", &name))
		return NULL;

	freyjaSkeletonCreate(name);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaSkeletonDelete(PyObject *self, PyObject *args)
{
	freyja_ptr skeleton;

	if (!PyArg_ParseTuple(args, "l", &skeleton))
		return NULL;

	freyjaSkeletonDelete(skeleton);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaSkeletonGetBone(PyObject *self, PyObject *args)
{
	freyja_ptr skeleton;
	freyja_id bone;

	if (!PyArg_ParseTuple(args, "ll", &skeleton, &bone))
		return NULL;

	return PyLong_FromVoidPtr(freyjaSkeletonGetBone(skeleton, bone));
}


PyObject *py_freyjaSkeletonGetBoneCount(PyObject *self, PyObject *args)
{
	freyja_ptr skeleton;

	if (!PyArg_ParseTuple(args, "l", &skeleton))
		return NULL;

	return PyInt_FromLong(freyjaSkeletonGetBoneCount(skeleton));
}


PyObject *py_freyjaSkeletonGetRoot(PyObject *self, PyObject *args)
{
	freyja_ptr skeleton;

	if (!PyArg_ParseTuple(args, "l", &skeleton))
		return NULL;

	return PyLong_FromVoidPtr(freyjaSkeletonGetRoot(skeleton));
}


PyObject *py_freyjaSkeletonSetRoot(PyObject *self, PyObject *args)
{
	freyja_ptr skeleton;
	freyja_ptr bone;

	if (!PyArg_ParseTuple(args, "ll", &skeleton, &bone))
		return NULL;

	freyjaSkeletonSetRoot(skeleton, bone);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaBoneCreate(PyObject *self, PyObject *args)
{
	freyja_ptr skeleton;
	char* name;

	if (!PyArg_ParseTuple(args, "ls", &skeleton, &name))
		return NULL;

	freyjaBoneCreate(skeleton, name);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaBoneDelete(PyObject *self, PyObject *args)
{
	freyja_ptr bone;

	if (!PyArg_ParseTuple(args, "l", &bone))
		return NULL;

	freyjaBoneDelete(bone);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaLightCreate(PyObject *self, PyObject *args)
{
	freyjaLightCreate();
	return PyInt_FromLong(0);
}


PyObject *py_freyjaLightDelete(PyObject *self, PyObject *args)
{
	index_t lightIndex;

	if (!PyArg_ParseTuple(args, "i", &lightIndex))
		return NULL;

	freyjaLightDelete(lightIndex);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaLightPosition4v(PyObject *self, PyObject *args)
{
	index_t lightIndex;
	vec4_t position;

	if (!PyArg_ParseTuple(args, "iffff", &lightIndex, position+0, position+1, position+2, position+3))
		return NULL;

	freyjaLightPosition4v(lightIndex, position);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaLightAmbient(PyObject *self, PyObject *args)
{
	index_t lightIndex;
	vec4_t ambient;

	if (!PyArg_ParseTuple(args, "iffff", &lightIndex, ambient+0, ambient+1, ambient+2, ambient+3))
		return NULL;

	freyjaLightAmbient(lightIndex, ambient);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaLightDiffuse(PyObject *self, PyObject *args)
{
	index_t lightIndex;
	vec4_t diffuse;

	if (!PyArg_ParseTuple(args, "iffff", &lightIndex, diffuse+0, diffuse+1, diffuse+2, diffuse+3))
		return NULL;

	freyjaLightDiffuse(lightIndex, diffuse);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaLightSpecular(PyObject *self, PyObject *args)
{
	index_t lightIndex;
	vec4_t specular;

	if (!PyArg_ParseTuple(args, "iffff", &lightIndex, specular+0, specular+1, specular+2, specular+3))
		return NULL;

	freyjaLightSpecular(lightIndex, specular);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialCreate(PyObject *self, PyObject *args)
{
	freyjaMaterialCreate();
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialClearAll(PyObject *self, PyObject *args)
{
	freyjaMaterialClearAll();
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialName(PyObject *self, PyObject *args)
{
	index_t material;
	char* name;

	if (!PyArg_ParseTuple(args, "is", &material, &name))
		return NULL;

	freyjaMaterialName(material, name);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialClearFlag(PyObject *self, PyObject *args)
{
	index_t material;
	uint32 flag;

	if (!PyArg_ParseTuple(args, "ii", &material, &flag))
		return NULL;

	freyjaMaterialClearFlag(material, flag);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialSetFlag(PyObject *self, PyObject *args)
{
	index_t material;
	uint32 flag;

	if (!PyArg_ParseTuple(args, "ii", &material, &flag))
		return NULL;

	freyjaMaterialSetFlag(material, flag);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialFlags(PyObject *self, PyObject *args)
{
	index_t material;
	uint32 flags;

	if (!PyArg_ParseTuple(args, "ii", &material, &flags))
		return NULL;

	freyjaMaterialFlags(material, flags);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialShaderName(PyObject *self, PyObject *args)
{
	index_t material;
	char* filename;

	if (!PyArg_ParseTuple(args, "is", &material, &filename))
		return NULL;

	freyjaMaterialShaderName(material, filename);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialTextureName(PyObject *self, PyObject *args)
{
	index_t material;
	char* name;

	if (!PyArg_ParseTuple(args, "is", &material, &name))
		return NULL;

	freyjaMaterialTextureName(material, name);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialShader(PyObject *self, PyObject *args)
{
	index_t material;
	index_t shader;

	if (!PyArg_ParseTuple(args, "ii", &material, &shader))
		return NULL;

	freyjaMaterialShader(material, shader);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialTexture(PyObject *self, PyObject *args)
{
	index_t material;
	index_t texture;

	if (!PyArg_ParseTuple(args, "ii", &material, &texture))
		return NULL;

	freyjaMaterialTexture(material, texture);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialAmbient(PyObject *self, PyObject *args)
{
	index_t material;
	vec4_t ambient;

	if (!PyArg_ParseTuple(args, "iffff", &material, ambient+0, ambient+1, ambient+2, ambient+3))
		return NULL;

	freyjaMaterialAmbient(material, ambient);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialDiffuse(PyObject *self, PyObject *args)
{
	index_t material;
	vec4_t diffuse;

	if (!PyArg_ParseTuple(args, "iffff", &material, diffuse+0, diffuse+1, diffuse+2, diffuse+3))
		return NULL;

	freyjaMaterialDiffuse(material, diffuse);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialSpecular(PyObject *self, PyObject *args)
{
	index_t material;
	vec4_t specular;

	if (!PyArg_ParseTuple(args, "iffff", &material, specular+0, specular+1, specular+2, specular+3))
		return NULL;

	freyjaMaterialSpecular(material, specular);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialEmissive(PyObject *self, PyObject *args)
{
	index_t material;
	vec4_t emissive;

	if (!PyArg_ParseTuple(args, "iffff", &material, emissive+0, emissive+1, emissive+2, emissive+3))
		return NULL;

	freyjaMaterialEmissive(material, emissive);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialShininess(PyObject *self, PyObject *args)
{
	index_t material;
	vec_t exponent;

	if (!PyArg_ParseTuple(args, "if", &material, &exponent))
		return NULL;

	freyjaMaterialShininess(material, exponent);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialTransparency(PyObject *self, PyObject *args)
{
	index_t material;
	vec_t transparency;

	if (!PyArg_ParseTuple(args, "if", &material, &transparency))
		return NULL;

	freyjaMaterialTransparency(material, transparency);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialBlendSource(PyObject *self, PyObject *args)
{
	index_t material;
	uint32 factor;

	if (!PyArg_ParseTuple(args, "ii", &material, &factor))
		return NULL;

	freyjaMaterialBlendSource(material, factor);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMaterialBlendDestination(PyObject *self, PyObject *args)
{
	index_t material;
	uint32 factor;

	if (!PyArg_ParseTuple(args, "ii", &material, &factor))
		return NULL;

	freyjaMaterialBlendDestination(material, factor);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaPakBegin(PyObject *self, PyObject *args)
{
	char* filename;

	if (!PyArg_ParseTuple(args, "s", &filename))
		return NULL;

	freyjaPakBegin(filename);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaPakAddDecoderFunction2s(PyObject *self, PyObject *args)
{
	char* module;
	char* symbol;

	if (!PyArg_ParseTuple(args, "ss", &module, &symbol))
		return NULL;

	freyjaPakAddDecoderFunction2s(module, symbol);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaPakAddFullPathFile(PyObject *self, PyObject *args)
{
	index_t pakIndex;
	char* vfsFilename;
	int32 offset;
	int32 size;

	if (!PyArg_ParseTuple(args, "isii", &pakIndex, &vfsFilename, &offset, &size))
		return NULL;

	freyjaPakAddFullPathFile(pakIndex, vfsFilename, offset, size);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaPakAddFullPathFileXOR(PyObject *self, PyObject *args)
{
	index_t pakIndex;
	byte key;
	char* vfsFilename;
	int32 offset;
	int32 size;

	if (!PyArg_ParseTuple(args, "iisii", &pakIndex, &key, &vfsFilename, &offset, &size))
		return NULL;

	freyjaPakAddFullPathFileXOR(pakIndex, key, vfsFilename, offset, size);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaPakEnd(PyObject *self, PyObject *args)
{
	index_t pakIndex;

	if (!PyArg_ParseTuple(args, "i", &pakIndex))
		return NULL;

	freyjaPakEnd(pakIndex);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMeshCreate(PyObject *self, PyObject *args)
{
	char* name;

	if (!PyArg_ParseTuple(args, "s", &name))
		return NULL;

	freyjaMeshCreate(name);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMeshDelete(PyObject *self, PyObject *args)
{
	freyja_ptr mesh;

	if (!PyArg_ParseTuple(args, "l", &mesh))
		return NULL;

	freyjaMeshDelete(mesh);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMeshGetVertex(PyObject *self, PyObject *args)
{
	freyja_ptr mesh;
	freyja_id vertex;

	if (!PyArg_ParseTuple(args, "ll", &mesh, &vertex))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshGetVertex(mesh, vertex));
}


PyObject *py_freyjaMeshGetFace(PyObject *self, PyObject *args)
{
	freyja_ptr mesh;
	freyja_id face;

	if (!PyArg_ParseTuple(args, "ll", &mesh, &face))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshGetFace(mesh, face));
}


PyObject *py_freyjaMeshGetWeight(PyObject *self, PyObject *args)
{
	freyja_ptr mesh;
	freyja_id weight;

	if (!PyArg_ParseTuple(args, "ll", &mesh, &weight))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshGetWeight(mesh, weight));
}


PyObject *py_freyjaMeshGetWeightCount(PyObject *self, PyObject *args)
{
	freyja_ptr mesh;

	if (!PyArg_ParseTuple(args, "l", &mesh))
		return NULL;

	return PyInt_FromLong(freyjaMeshGetWeightCount(mesh));
}


PyObject *py_freyjaMeshSetMaterial(PyObject *self, PyObject *args)
{
	freyja_ptr mesh;
	freyja_ptr material;

	if (!PyArg_ParseTuple(args, "ll", &mesh, &material))
		return NULL;

	freyjaMeshSetMaterial(mesh, material);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMeshSetPosition(PyObject *self, PyObject *args)
{
	freyja_ptr meshIndex;
	vec3_t xyz;

	if (!PyArg_ParseTuple(args, "lfff", &meshIndex, xyz+0, xyz+1, xyz+2))
		return NULL;

	freyjaMeshSetPosition(meshIndex, xyz);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaMeshCreateSheet(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t size;
	uint32 rows;
	uint32 columns;

	if (!PyArg_ParseTuple(args, "ffffii", origin+0, origin+1, origin+2, &size, &rows, &columns))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateSheet(origin, size, rows, columns));
}


PyObject *py_freyjaMeshCreateLattice(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t size;
	uint32 rows;
	uint32 columns;
	uint32 layers;

	if (!PyArg_ParseTuple(args, "ffffiii", origin+0, origin+1, origin+2, &size, &rows, &columns, &layers))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateLattice(origin, size, rows, columns, layers));
}


PyObject *py_freyjaMeshCreateCube(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t size;

	if (!PyArg_ParseTuple(args, "ffff", origin+0, origin+1, origin+2, &size))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateCube(origin, size));
}


PyObject *py_freyjaMeshCreateRing(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t radius;
	uint32 count;
	uint32 rings;

	if (!PyArg_ParseTuple(args, "ffffii", origin+0, origin+1, origin+2, &radius, &count, &rings))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateRing(origin, radius, count, rings));
}


PyObject *py_freyjaMeshCreateCircle(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t radius;
	uint32 count;

	if (!PyArg_ParseTuple(args, "ffffi", origin+0, origin+1, origin+2, &radius, &count))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateCircle(origin, radius, count));
}


PyObject *py_freyjaMeshCreateCone(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t height;
	vec_t radius;
	uint32 wedges;

	if (!PyArg_ParseTuple(args, "fffffi", origin+0, origin+1, origin+2, &height, &radius, &wedges))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateCone(origin, height, radius, wedges));
}


PyObject *py_freyjaMeshCreateCylinder(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t height;
	vec_t radius;
	uint32 sides;
	uint32 rings;

	if (!PyArg_ParseTuple(args, "fffffii", origin+0, origin+1, origin+2, &height, &radius, &sides, &rings))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateCylinder(origin, height, radius, sides, rings));
}


PyObject *py_freyjaMeshCreateSphere(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t radius;
	uint32 sides;
	uint32 rings;

	if (!PyArg_ParseTuple(args, "ffffii", origin+0, origin+1, origin+2, &radius, &sides, &rings))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateSphere(origin, radius, sides, rings));
}


PyObject *py_freyjaMeshCreateTube(PyObject *self, PyObject *args)
{
	vec3_t origin;
	vec_t height;
	vec_t radius;
	uint32 sides;
	uint32 rings;

	if (!PyArg_ParseTuple(args, "fffffii", origin+0, origin+1, origin+2, &height, &radius, &sides, &rings))
		return NULL;

	return PyLong_FromVoidPtr(freyjaMeshCreateTube(origin, height, radius, sides, rings));
}


PyObject *py_freyjaCameraPoolClear(PyObject *self, PyObject *args)
{
	freyjaCameraPoolClear();
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraCreate(PyObject *self, PyObject *args)
{
	return PyInt_FromLong(freyjaCameraCreate());
}


PyObject *py_freyjaCameraDelete(PyObject *self, PyObject *args)
{
	index_t cameraIndex;

	if (!PyArg_ParseTuple(args, "i", &cameraIndex))
		return NULL;

	freyjaCameraDelete(cameraIndex);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraClearFlags(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	byte flags;

	if (!PyArg_ParseTuple(args, "ii", &cameraIndex, &flags))
		return NULL;

	freyjaCameraClearFlags(cameraIndex, flags);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraSetFlags(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	byte flags;

	if (!PyArg_ParseTuple(args, "ii", &cameraIndex, &flags))
		return NULL;

	freyjaCameraSetFlags(cameraIndex, flags);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraName(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	char* name;

	if (!PyArg_ParseTuple(args, "is", &cameraIndex, &name))
		return NULL;

	freyjaCameraName(cameraIndex, name);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraPos3f(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	vec_t x;
	vec_t y;
	vec_t z;

	if (!PyArg_ParseTuple(args, "ifff", &cameraIndex, &x, &y, &z))
		return NULL;

	freyjaCameraPos3f(cameraIndex, x, y, z);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraPos3fv(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	vec3_t xyz;

	if (!PyArg_ParseTuple(args, "ifff", &cameraIndex, xyz+0, xyz+1, xyz+2))
		return NULL;

	freyjaCameraPos3fv(cameraIndex, xyz);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraTarget3f(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	vec_t x;
	vec_t y;
	vec_t z;

	if (!PyArg_ParseTuple(args, "ifff", &cameraIndex, &x, &y, &z))
		return NULL;

	freyjaCameraTarget3f(cameraIndex, x, y, z);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraTarget3fv(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	vec3_t xyz;

	if (!PyArg_ParseTuple(args, "ifff", &cameraIndex, xyz+0, xyz+1, xyz+2))
		return NULL;

	freyjaCameraTarget3fv(cameraIndex, xyz);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraUp3f(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	vec_t x;
	vec_t y;
	vec_t z;

	if (!PyArg_ParseTuple(args, "ifff", &cameraIndex, &x, &y, &z))
		return NULL;

	freyjaCameraUp3f(cameraIndex, x, y, z);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraUp3fv(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	vec3_t xyz;

	if (!PyArg_ParseTuple(args, "ifff", &cameraIndex, xyz+0, xyz+1, xyz+2))
		return NULL;

	freyjaCameraUp3fv(cameraIndex, xyz);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraRotQuat4f(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	vec_t w;
	vec_t x;
	vec_t y;
	vec_t z;

	if (!PyArg_ParseTuple(args, "iffff", &cameraIndex, &w, &x, &y, &z))
		return NULL;

	freyjaCameraRotQuat4f(cameraIndex, w, x, y, z);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraRotQuat4fv(PyObject *self, PyObject *args)
{
	index_t cameraIndex;
	vec4_t wxyz;

	if (!PyArg_ParseTuple(args, "iffff", &cameraIndex, wxyz+0, wxyz+1, wxyz+2, wxyz+3))
		return NULL;

	freyjaCameraRotQuat4fv(cameraIndex, wxyz);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraMetadata(PyObject *self, PyObject *args)
{
	index_t camera;
	char* metadata;

	if (!PyArg_ParseTuple(args, "is", &camera, &metadata))
		return NULL;

	freyjaCameraMetadata(camera, metadata);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraCreateTrack(PyObject *self, PyObject *args)
{
	index_t camera;

	if (!PyArg_ParseTuple(args, "i", &camera))
		return NULL;

	return PyInt_FromLong(freyjaCameraCreateTrack(camera));
}


PyObject *py_freyjaCameraTrackDuration(PyObject *self, PyObject *args)
{
	index_t camera;
	index_t track;
	vec_t duration;

	if (!PyArg_ParseTuple(args, "iif", &camera, &track, &duration))
		return NULL;

	freyjaCameraTrackDuration(camera, track, duration);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraTrackRate(PyObject *self, PyObject *args)
{
	index_t camera;
	index_t track;
	vec_t fps;

	if (!PyArg_ParseTuple(args, "iif", &camera, &track, &fps))
		return NULL;

	freyjaCameraTrackRate(camera, track, fps);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraCreateKeyframe(PyObject *self, PyObject *args)
{
	index_t camera;
	index_t track;
	vec_t time;

	if (!PyArg_ParseTuple(args, "iif", &camera, &track, &time))
		return NULL;

	return PyInt_FromLong(freyjaCameraCreateKeyframe(camera, track, time));
}


PyObject *py_freyjaCameraKeyframeMetadata(PyObject *self, PyObject *args)
{
	index_t camera;
	index_t track;
	index_t key;
	char* metadata;

	if (!PyArg_ParseTuple(args, "iiis", &camera, &track, &key, &metadata))
		return NULL;

	freyjaCameraKeyframeMetadata(camera, track, key, metadata);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraKeyframePos3f(PyObject *self, PyObject *args)
{
	index_t camera;
	index_t track;
	index_t key;
	vec_t x;
	vec_t y;
	vec_t z;

	if (!PyArg_ParseTuple(args, "iiifff", &camera, &track, &key, &x, &y, &z))
		return NULL;

	freyjaCameraKeyframePos3f(camera, track, key, x, y, z);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaCameraKeyframeRotQuat4f(PyObject *self, PyObject *args)
{
	index_t camera;
	index_t track;
	index_t key;
	vec_t w;
	vec_t x;
	vec_t y;
	vec_t z;

	if (!PyArg_ParseTuple(args, "iiiffff", &camera, &track, &key, &w, &x, &y, &z))
		return NULL;

	freyjaCameraKeyframeRotQuat4f(camera, track, key, w, x, y, z);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaNodeDuplicate(PyObject *self, PyObject *args)
{
	freyja_ptr node;

	if (!PyArg_ParseTuple(args, "l", &node))
		return NULL;

	freyjaNodeDuplicate(node);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaNodeGetFlags(PyObject *self, PyObject *args)
{
	freyja_ptr node;

	if (!PyArg_ParseTuple(args, "l", &node))
		return NULL;

	return PyInt_FromLong(freyjaNodeGetFlags(node));
}


PyObject *py_freyjaNodeGetName(PyObject *self, PyObject *args)
{
	freyja_ptr node;

	if (!PyArg_ParseTuple(args, "l", &node))
		return NULL;

	return PyString_FromString(freyjaNodeGetName(node));
}


PyObject *py_freyjaNodeGetParent(PyObject *self, PyObject *args)
{
	freyja_ptr node;

	if (!PyArg_ParseTuple(args, "l", &node))
		return NULL;

	return PyLong_FromVoidPtr(freyjaNodeGetParent(node));
}


PyObject *py_freyjaNodeGetPosition(PyObject *self, PyObject *args)
{
	freyja_ptr node;
	vec3_t xyz;

	if (!PyArg_ParseTuple(args, "lfff", &node, xyz+0, xyz+1, xyz+2))
		return NULL;

	freyjaNodeGetPosition(node, xyz);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaNodeIsSelected(PyObject *self, PyObject *args)
{
	freyja_ptr node;

	if (!PyArg_ParseTuple(args, "l", &node))
		return NULL;

	return PyInt_FromLong(freyjaNodeIsSelected(node));
}


PyObject *py_freyjaNodeSetFlags(PyObject *self, PyObject *args)
{
	freyja_ptr node;
	byte flags;

	if (!PyArg_ParseTuple(args, "li", &node, &flags))
		return NULL;

	freyjaNodeSetFlags(node, flags);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaNodeSetName(PyObject *self, PyObject *args)
{
	freyja_ptr node;
	char* name;

	if (!PyArg_ParseTuple(args, "ls", &node, &name))
		return NULL;

	freyjaNodeSetName(node, name);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaNodeSetParent(PyObject *self, PyObject *args)
{
	freyja_ptr node;
	freyja_ptr parent;

	if (!PyArg_ParseTuple(args, "ll", &node, &parent))
		return NULL;

	freyjaNodeSetParent(node, parent);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaNodeSetPosition3fv(PyObject *self, PyObject *args)
{
	freyja_ptr node;
	vec3_t xyz;

	if (!PyArg_ParseTuple(args, "lfff", &node, xyz+0, xyz+1, xyz+2))
		return NULL;

	freyjaNodeSetPosition3fv(node, xyz);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaNodeSetPosition3f(PyObject *self, PyObject *args)
{
	freyja_ptr node;
	vec_t x;
	vec_t y;
	vec_t z;

	if (!PyArg_ParseTuple(args, "lfff", &node, &x, &y, &z))
		return NULL;

	freyjaNodeSetPosition3f(node, x, y, z);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaNodeSetOrientationQuat4f(PyObject *self, PyObject *args)
{
	freyja_ptr node;
	vec_t w;
	vec_t x;
	vec_t y;
	vec_t z;

	if (!PyArg_ParseTuple(args, "lffff", &node, &w, &x, &y, &z))
		return NULL;

	freyjaNodeSetOrientationQuat4f(node, w, x, y, z);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaSceneNodeGetBoundingBox(PyObject *self, PyObject *args)
{
	freyja_ptr scenenode;
	vec3_t min;
	vec3_t max;

	if (!PyArg_ParseTuple(args, "lffffff", &scenenode, min+0, min+1, min+2, max+0, max+1, max+2))
		return NULL;

	freyjaSceneNodeGetBoundingBox(scenenode, min, max);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaSceneNodeGetBoundingSphereCenter(PyObject *self, PyObject *args)
{
	freyja_ptr scenenode;
	vec3_t center;

	if (!PyArg_ParseTuple(args, "lfff", &scenenode, center+0, center+1, center+2))
		return NULL;

	freyjaSceneNodeGetBoundingSphereCenter(scenenode, center);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaSceneNodeGetBoundingSphereRadius(PyObject *self, PyObject *args)
{
	freyja_ptr scenenode;

	if (!PyArg_ParseTuple(args, "l", &scenenode))
		return NULL;

	return PyFloat_FromDouble(freyjaSceneNodeGetBoundingSphereRadius(scenenode));
}


PyObject *py_freyjaSceneAddNode(PyObject *self, PyObject *args)
{
	freyja_ptr scene;
	freyja_ptr node;

	if (!PyArg_ParseTuple(args, "ll", &scene, &node))
		return NULL;

	freyjaSceneAddNode(scene, node);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaSceneGetNode(PyObject *self, PyObject *args)
{
	freyja_ptr scene;
	freyja_id node;

	if (!PyArg_ParseTuple(args, "ll", &scene, &node))
		return NULL;

	return PyLong_FromVoidPtr(freyjaSceneGetNode(scene, node));
}


PyObject *py_freyjaSceneGetSkeletonCount(PyObject *self, PyObject *args)
{
	freyja_ptr scene;

	if (!PyArg_ParseTuple(args, "l", &scene))
		return NULL;

	return PyInt_FromLong(freyjaSceneGetSkeletonCount(scene));
}


PyObject *py_freyjaSceneGetMeshCount(PyObject *self, PyObject *args)
{
	freyja_ptr scene;

	if (!PyArg_ParseTuple(args, "l", &scene))
		return NULL;

	return PyInt_FromLong(freyjaSceneGetMeshCount(scene));
}


PyObject *py_freyjaSceneGetPixelbufferCount(PyObject *self, PyObject *args)
{
	freyja_ptr scene;

	if (!PyArg_ParseTuple(args, "l", &scene))
		return NULL;

	return PyInt_FromLong(freyjaSceneGetPixelbufferCount(scene));
}


PyObject *py_freyjaFileOpen(PyObject *self, PyObject *args)
{
	char* filename;
	char* mode;

	if (!PyArg_ParseTuple(args, "ss", &filename, &mode))
		return NULL;

	freyjaFileOpen(filename, mode);
	return PyInt_FromLong(0);
}


PyObject *py_freyjaFileClose(PyObject *self, PyObject *args)
{
	freyja_ptr file;

	if (!PyArg_ParseTuple(args, "l", &file))
		return NULL;

	freyjaFileClose(file);
	return PyInt_FromLong(0);
}


PyMethodDef Plugin_methods[] = {
	{ "freyjaSkeletonCreate", py_freyjaSkeletonCreate, METH_VARARGS },
	{ "freyjaSkeletonDelete", py_freyjaSkeletonDelete, METH_VARARGS },
	{ "freyjaSkeletonGetBone", py_freyjaSkeletonGetBone, METH_VARARGS },
	{ "freyjaSkeletonGetBoneCount", py_freyjaSkeletonGetBoneCount, METH_VARARGS },
	{ "freyjaSkeletonGetRoot", py_freyjaSkeletonGetRoot, METH_VARARGS },
	{ "freyjaSkeletonSetRoot", py_freyjaSkeletonSetRoot, METH_VARARGS },
	{ "freyjaBoneCreate", py_freyjaBoneCreate, METH_VARARGS },
	{ "freyjaBoneDelete", py_freyjaBoneDelete, METH_VARARGS },
	{ "freyjaLightCreate", py_freyjaLightCreate, METH_VARARGS },
	{ "freyjaLightDelete", py_freyjaLightDelete, METH_VARARGS },
	{ "freyjaLightPosition4v", py_freyjaLightPosition4v, METH_VARARGS },
	{ "freyjaLightAmbient", py_freyjaLightAmbient, METH_VARARGS },
	{ "freyjaLightDiffuse", py_freyjaLightDiffuse, METH_VARARGS },
	{ "freyjaLightSpecular", py_freyjaLightSpecular, METH_VARARGS },
	{ "freyjaMaterialCreate", py_freyjaMaterialCreate, METH_VARARGS },
	{ "freyjaMaterialClearAll", py_freyjaMaterialClearAll, METH_VARARGS },
	{ "freyjaMaterialName", py_freyjaMaterialName, METH_VARARGS },
	{ "freyjaMaterialClearFlag", py_freyjaMaterialClearFlag, METH_VARARGS },
	{ "freyjaMaterialSetFlag", py_freyjaMaterialSetFlag, METH_VARARGS },
	{ "freyjaMaterialFlags", py_freyjaMaterialFlags, METH_VARARGS },
	{ "freyjaMaterialShaderName", py_freyjaMaterialShaderName, METH_VARARGS },
	{ "freyjaMaterialTextureName", py_freyjaMaterialTextureName, METH_VARARGS },
	{ "freyjaMaterialShader", py_freyjaMaterialShader, METH_VARARGS },
	{ "freyjaMaterialTexture", py_freyjaMaterialTexture, METH_VARARGS },
	{ "freyjaMaterialAmbient", py_freyjaMaterialAmbient, METH_VARARGS },
	{ "freyjaMaterialDiffuse", py_freyjaMaterialDiffuse, METH_VARARGS },
	{ "freyjaMaterialSpecular", py_freyjaMaterialSpecular, METH_VARARGS },
	{ "freyjaMaterialEmissive", py_freyjaMaterialEmissive, METH_VARARGS },
	{ "freyjaMaterialShininess", py_freyjaMaterialShininess, METH_VARARGS },
	{ "freyjaMaterialTransparency", py_freyjaMaterialTransparency, METH_VARARGS },
	{ "freyjaMaterialBlendSource", py_freyjaMaterialBlendSource, METH_VARARGS },
	{ "freyjaMaterialBlendDestination", py_freyjaMaterialBlendDestination, METH_VARARGS },
	{ "freyjaPakBegin", py_freyjaPakBegin, METH_VARARGS },
	{ "freyjaPakAddDecoderFunction2s", py_freyjaPakAddDecoderFunction2s, METH_VARARGS },
	{ "freyjaPakAddFullPathFile", py_freyjaPakAddFullPathFile, METH_VARARGS },
	{ "freyjaPakAddFullPathFileXOR", py_freyjaPakAddFullPathFileXOR, METH_VARARGS },
	{ "freyjaPakEnd", py_freyjaPakEnd, METH_VARARGS },
	{ "freyjaMeshCreate", py_freyjaMeshCreate, METH_VARARGS },
	{ "freyjaMeshDelete", py_freyjaMeshDelete, METH_VARARGS },
	{ "freyjaMeshGetVertex", py_freyjaMeshGetVertex, METH_VARARGS },
	{ "freyjaMeshGetFace", py_freyjaMeshGetFace, METH_VARARGS },
	{ "freyjaMeshGetWeight", py_freyjaMeshGetWeight, METH_VARARGS },
	{ "freyjaMeshGetWeightCount", py_freyjaMeshGetWeightCount, METH_VARARGS },
	{ "freyjaMeshSetMaterial", py_freyjaMeshSetMaterial, METH_VARARGS },
	{ "freyjaMeshSetPosition", py_freyjaMeshSetPosition, METH_VARARGS },
	{ "freyjaMeshCreateSheet", py_freyjaMeshCreateSheet, METH_VARARGS },
	{ "freyjaMeshCreateLattice", py_freyjaMeshCreateLattice, METH_VARARGS },
	{ "freyjaMeshCreateCube", py_freyjaMeshCreateCube, METH_VARARGS },
	{ "freyjaMeshCreateRing", py_freyjaMeshCreateRing, METH_VARARGS },
	{ "freyjaMeshCreateCircle", py_freyjaMeshCreateCircle, METH_VARARGS },
	{ "freyjaMeshCreateCone", py_freyjaMeshCreateCone, METH_VARARGS },
	{ "freyjaMeshCreateCylinder", py_freyjaMeshCreateCylinder, METH_VARARGS },
	{ "freyjaMeshCreateSphere", py_freyjaMeshCreateSphere, METH_VARARGS },
	{ "freyjaMeshCreateTube", py_freyjaMeshCreateTube, METH_VARARGS },
	{ "freyjaCameraPoolClear", py_freyjaCameraPoolClear, METH_VARARGS },
	{ "freyjaCameraCreate", py_freyjaCameraCreate, METH_VARARGS },
	{ "freyjaCameraDelete", py_freyjaCameraDelete, METH_VARARGS },
	{ "freyjaCameraClearFlags", py_freyjaCameraClearFlags, METH_VARARGS },
	{ "freyjaCameraSetFlags", py_freyjaCameraSetFlags, METH_VARARGS },
	{ "freyjaCameraName", py_freyjaCameraName, METH_VARARGS },
	{ "freyjaCameraPos3f", py_freyjaCameraPos3f, METH_VARARGS },
	{ "freyjaCameraPos3fv", py_freyjaCameraPos3fv, METH_VARARGS },
	{ "freyjaCameraTarget3f", py_freyjaCameraTarget3f, METH_VARARGS },
	{ "freyjaCameraTarget3fv", py_freyjaCameraTarget3fv, METH_VARARGS },
	{ "freyjaCameraUp3f", py_freyjaCameraUp3f, METH_VARARGS },
	{ "freyjaCameraUp3fv", py_freyjaCameraUp3fv, METH_VARARGS },
	{ "freyjaCameraRotQuat4f", py_freyjaCameraRotQuat4f, METH_VARARGS },
	{ "freyjaCameraRotQuat4fv", py_freyjaCameraRotQuat4fv, METH_VARARGS },
	{ "freyjaCameraMetadata", py_freyjaCameraMetadata, METH_VARARGS },
	{ "freyjaCameraCreateTrack", py_freyjaCameraCreateTrack, METH_VARARGS },
	{ "freyjaCameraTrackDuration", py_freyjaCameraTrackDuration, METH_VARARGS },
	{ "freyjaCameraTrackRate", py_freyjaCameraTrackRate, METH_VARARGS },
	{ "freyjaCameraCreateKeyframe", py_freyjaCameraCreateKeyframe, METH_VARARGS },
	{ "freyjaCameraKeyframeMetadata", py_freyjaCameraKeyframeMetadata, METH_VARARGS },
	{ "freyjaCameraKeyframePos3f", py_freyjaCameraKeyframePos3f, METH_VARARGS },
	{ "freyjaCameraKeyframeRotQuat4f", py_freyjaCameraKeyframeRotQuat4f, METH_VARARGS },
	{ "freyjaNodeDuplicate", py_freyjaNodeDuplicate, METH_VARARGS },
	{ "freyjaNodeGetFlags", py_freyjaNodeGetFlags, METH_VARARGS },
	{ "freyjaNodeGetName", py_freyjaNodeGetName, METH_VARARGS },
	{ "freyjaNodeGetParent", py_freyjaNodeGetParent, METH_VARARGS },
	{ "freyjaNodeGetPosition", py_freyjaNodeGetPosition, METH_VARARGS },
	{ "freyjaNodeIsSelected", py_freyjaNodeIsSelected, METH_VARARGS },
	{ "freyjaNodeSetFlags", py_freyjaNodeSetFlags, METH_VARARGS },
	{ "freyjaNodeSetName", py_freyjaNodeSetName, METH_VARARGS },
	{ "freyjaNodeSetParent", py_freyjaNodeSetParent, METH_VARARGS },
	{ "freyjaNodeSetPosition3fv", py_freyjaNodeSetPosition3fv, METH_VARARGS },
	{ "freyjaNodeSetPosition3f", py_freyjaNodeSetPosition3f, METH_VARARGS },
	{ "freyjaNodeSetOrientationQuat4f", py_freyjaNodeSetOrientationQuat4f, METH_VARARGS },
	{ "freyjaSceneNodeGetBoundingBox", py_freyjaSceneNodeGetBoundingBox, METH_VARARGS },
	{ "freyjaSceneNodeGetBoundingSphereCenter", py_freyjaSceneNodeGetBoundingSphereCenter, METH_VARARGS },
	{ "freyjaSceneNodeGetBoundingSphereRadius", py_freyjaSceneNodeGetBoundingSphereRadius, METH_VARARGS },
	{ "freyjaSceneAddNode", py_freyjaSceneAddNode, METH_VARARGS },
	{ "freyjaSceneGetNode", py_freyjaSceneGetNode, METH_VARARGS },
	{ "freyjaSceneGetSkeletonCount", py_freyjaSceneGetSkeletonCount, METH_VARARGS },
	{ "freyjaSceneGetMeshCount", py_freyjaSceneGetMeshCount, METH_VARARGS },
	{ "freyjaSceneGetPixelbufferCount", py_freyjaSceneGetPixelbufferCount, METH_VARARGS },
	{ "freyjaFileOpen", py_freyjaFileOpen, METH_VARARGS },
	{ "freyjaFileClose", py_freyjaFileClose, METH_VARARGS },
	{ NULL }
};


PyObject *Freyja_Plugin_Gobals()
{
	PyObject *module, *dict, *tmp;

	module = Py_InitModule("FreyjaModeler", Plugin_methods);
	dict = PyModule_GetDict(module);
	
	/* Append gobal constants you want python to see */
	tmp = PyInt_FromLong(FREYJA_MODEL);
	PyDict_SetItemString(dict, "FREYJA_MODEL", tmp);
	Py_DECREF(tmp);
	
	return module;
}


#endif // USING_PYTHON


void freyjaPython1s(const char *plugin, const char *symbol, const char *s)
{
#ifdef USING_PYTHON
	PyObject *module, *dict, *tmp, *tmp2;

	/* Start up python */
	Py_Initialize();
	module = Freyja_Plugin_Gobals();
	dict = PyModule_GetDict(module);

	/* Append gobal constants, string in as "Symbol" in python */
	tmp = PyString_FromFormat(symbol);
	PyDict_SetItemString(dict, "FreyjaSymbol", tmp);
	Py_DECREF(tmp);
	tmp2 = PyString_FromFormat(s);
	PyDict_SetItemString(dict, "FreyjaArgs", tmp2);
	Py_DECREF(tmp2);

	freyjaPrintMessage("[Module '%s' opened.]", plugin);
	FILE *f = fopen(plugin, "r");

	if (!f)
	{
		freyjaPrintError("[Module '%s' failed to load.]", plugin);
		perror(plugin);
	}
	else
	{
		PyRun_SimpleFile(f, plugin);
		Py_Finalize();
	}
#else
	freyjaPrintError("[Module '%s' failed to load.  Rebuild with USING_PYTHON.]", plugin);
#endif // USING_PYTHON
}


