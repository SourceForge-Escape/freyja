################################################################
# Mongoose <mongoose@icculus.org>
################################################################
# + Cleaner clean
# + Add new include tree
# + Add new flags
# + Install/Uninstall
# + Lots of misc new features
################################################################

NAME=freyja
BASE_NAME=freyja
MAJOR_VERSION=0
MINOR_VERSION=4
MICRO_VERSION=0
BRANCH=
BUILD_ID=20050724
VERSION=$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION)$(BRANCH)
BUILD_HOST=`uname -n -m -s`
WEBSITE="http://icculus.org/freyja"
EMAIL="mongoose@icculus.org"
EXT=
TREE_DIR=freyja
TARBALL_NAME=$(NAME)-$(VERSION).$(BUILD_ID)$(BRANCH)
LICENSE=

################################################################

BUILD_SELECT=debug

# USE_ARB_MULTITEXTURE 
# DISABLE_MULTITEXTURE
# DISABLE_GTK_COLORBUTTON
CONFIGURE_CFLAGS=-DPROTOTYPE_02 -DPLANE_NOTIFY_WITH_AXIS \
		-DHAVE_FREYJA_IMAGE -DFORCE_GLAREA_GTK_2_0 \
		-DHAVE_OPENGL -DHAVE_GTKGL -DHAVE_HEL
CONFIGURE_LDFLAGS=

################################################################

CC=gcc
#CC=i586-mingw32msvc-g++
#CPP=i586-mingw32msvc-cpp
#LD=i586-mingw32msvc-ld

################################################################

BUILD_DEBUG_DIR=bin/debug
BUILD_RELEASE_DIR=bin/release
BUILD_PROF_DIR=bin/prof
BUILD_TEST_DIR=bin/test
BUILD_INSTALL_DIR=bin/$(BUILD_SELECT)

SRC_DIR=src

DESTDIR =
NO_DEB=
NO_DEB=local/
INSTALL_BIN=$(DESTDIR)/usr/$(NO_DEB)bin
INSTALL_LIB=$(DESTDIR)/usr/$(NO_DEB)lib
INSTALL_DOC=$(DESTDIR)/usr/share/doc/$(NAME)
INSTALL_SHARE=$(DESTDIR)/usr/share/$(NAME)
INSTALL_INCLUDE=$(DESTDIR)/usr/$(NO_DEB)include
INSTALL_PLUGIN_DIR=$(INSTALL_LIB)/$(BASE_NAME)/modules


################################################################
# Debian package setup
################################################################

DEB_DIR=/tmp/$(NAME).deb
NAME_DEB=$(NAME)
VERSION_DEB=$(VERSION).$(BUILD_ID)

################################################################

DEBUG_DEFS=-DDEBUG -DEXPERIMENTAL

# -Weffc++ -Wall -pedantic -std=c99
BASE_DEFS=-Isrc $(CONFIGURE_CFLAGS) -Wno-deprecated -Weffc++ -Wall -pedantic

BASE_CFLAGS=$(CONFIGURE_CFLAGS) \
		-Wall -Isrc \
		-DPROJECT_URL=\"\\\"$(WEBSITE)\\\"\" \
		-DEMAIL_ADDRESS=\"\\\"$(EMAIL)\\\"\" \
		-DVERSION=\"\\\"$(VERSION)\\\"\" \
		-DBUILD_ID=\"\\\"$(BUILD_ID)\\\"\" \
		-DPROGRAM_NAME=\"\\\"$(NAME)\\\"\" \
		-DBUILD_NAME=\"\\\"$(NAME)-$(VERSION)-$(BUILD_ID)\\\"\" \
		-DBUILD_HOST=\"\\\"$(BUILD_HOST)\\\"\"

#-framework OpenGL
LD_FLAGS=-L/usr/X11R6/lib $(CONFIGURE_LDFLAGS) \
		-lstdc++ -lGL -lGLU -lm -lz \
		-lhel0 -lfreyja-0.10 -lmgtk \
		$(shell pkg-config --libs gtk+-2.0) -lgtkgl-2.0
LD_FLAGS += -Wl,-z,defs
LD_FLAGS += -Wl,-O1

################################################################

RELEASE_CFLAGS=$(BASE_CFLAGS) \
	-ffast-math -funroll-loops -DNDEBUG \
	-fomit-frame-pointer -fexpensive-optimizations -O2

DEBUG_CFLAGS=$(BASE_CFLAGS) -g $(DEBUG_DEFS)

DO_CC=$(CC) $(CFLAGS) -o $@ -c $<

################################################################

TARGETS=$(BUILD_DIR)/$(NAME)

auto: $(BUILD_SELECT)

################################################################
# GTK+ 2.0 
debug:
	@-mkdir -p $(BUILD_DEBUG_DIR)
	$(MAKE) targets BUILD_DIR=$(BUILD_DEBUG_DIR) \
	CFLAGS="$(DEBUG_CFLAGS) $(GTK2_CFLAGS) $(GTK_GLAREA2_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS) $(GTK2_LDFLAGS) $(GTK_GLAREA2_LD_FLAGS)"

release:
	@-mkdir -p $(BUILD_RELEASE_DIR)
	$(MAKE) targets BUILD_DIR=$(BUILD_RELEASE_DIR) \
	CFLAGS="$(RELEASE_CFLAGS) $(GTK2_CFLAGS) $(GTK_GLAREA2_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS) $(GTK2_LDFLAGS) $(GTK_GLAREA2_LD_FLAGS)"

prof: 
	@-mkdir -p $(BUILD_PROF_DIR)
	$(MAKE) targets BUILD_DIR=$(BUILD_PROF_DIR) \
	CFLAGS="$(DEBUG_CFLAGS) $(GTK2_CFLAGS) $(GTK_GLAREA2_CFLAGS) -DNDEBUG -pg" \
	LD_FLAGS="$(LD_FLAGS) $(GTK2_LDFLAGS) $(GTK_GLAREA2_LD_FLAGS) -pg"

########################################################################

all: debug release prof

########################################################################

targets: $(TARGETS)

OBJS = \
	$(BUILD_DIR)/freyja_events.o \
	$(BUILD_DIR)/Texture.o \
	$(BUILD_DIR)/FreyjaRender.o \
	$(BUILD_DIR)/FreyjaControl.o \
	$(BUILD_DIR)/FreyjaModel.o


$(BUILD_DIR)/$(NAME) : $(OBJS) 
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LD_FLAGS)

################################################################

-include depend

################################################################

depend-plugins:
	@-find ./plugins -name "*.cpp" -exec ./deps.sh $(BASE_DEFS) {} \; >> depend

depend:
	@-printf "Making deps..."
	@-printf "# Autogenerated dependency file\n" > depend
	@-find ./src -name "*.cpp" -exec ./deps.sh {} $(BASE_DEFS) $(BASE_INC) \; >> depend
	$(MAKE) depend-plugins
	@-printf "       [done]\n"


################################################################

clean-all: clean clean-conf

clean: clean-builds

clean-builds: 
	@-echo -n "Cleaning emacs files                        "
	@-rm -f `find . -name "*~" -print`
	@-echo [done]

	@-echo -n "Cleaning profiling output                   "
	@-rm -f gmon.out
	@-echo [done]

	@-echo -n "Cleaning .xvpics cache                      "
	@-rm -rf `find -name ".xvpics" -print`
	@-echo [done]

	@-echo -n "Cleaning TEST builds                        "
	@-rm -f $(BUILD_TEST_DIR)/*.test
	@-echo [done]

	@-echo -n "Cleaning Gtk+ 2.0 build                     "
	@-rm -f $(BUILD_GTK2_DIR)*/*.o
	@-rm -f $(BUILD_GTK2_DIR)*/$(NAME)
	@-rm -f $(BUILD_GTK2_DIR)*/*.test
	@-echo [done]

	@-echo -n "Cleaning DEBUG builds                       "
	@-rm -f $(BUILD_DEBUG_DIR)*/*.o
	@-rm -f $(BUILD_DEBUG_DIR)*/$(NAME)
	@-rm -f $(BUILD_DEBUG_DIR)*/*.test
	@-echo [done]

	@-echo -n "Cleaning PROF builds                        "
	@-rm -f $(BUILD_PROF_DIR)*/*.o
	@-rm -f $(BUILD_PROF_DIR)*/$(NAME)
	@-rm -f $(BUILD_PROF_DIR)*/*.test
	@-echo [done]

	@-echo -n "Cleaning RELEASE builds                     "
	@-rm -f $(BUILD_RELEASE_DIR)*/*.o
	@-rm -f $(BUILD_RELEASE_DIR)*/$(NAME)
	@-echo [done]

clean-conf:
	@-echo -n "Cleaning autotools                          "
	@-rm -f mkinstalldirs system.info configure \
		config.status config.log \
		autoscan.log config.cache stamp-* \
		missing install-sh \
		Makefile.in confdefs.h
	@-echo [done]

#################################################################

clean-deb:
	@-echo -n "Cleaning DEBs                                "
	@-rm -rf $(DEB_DIR)
	@-echo "[DONE]"

debian-package:
	$(MAKE) clean-deb
	$(MAKE) tarball
	mkdir -p $(DEB_DIR)
	cp ../$(NAME_DEB)-$(VERSION_DEB).tar.gz $(DEB_DIR)
	cd $(DEB_DIR) && tar zxvf $(NAME_DEB)-$(VERSION_DEB).tar.gz && mv $(TREE_DIR) $(NAME_DEB)-$(VERSION_DEB) && cd $(NAME_DEB)-$(VERSION_DEB) && make deb-init && make deb

deb-init:
	dh_make -c lgpl -s -e mongoose@icculus.org -f ../$(NAME_DEB)-$(VERSION_DEB).tar.gz
	@-cp debian/control debian/control.old
	@-sed -e "s/<insert up to 60 chars description>/Freyja 3d modeler/g" debian/control.old > debian/control
	@-rm -f debian/control.old
	@-cp debian/control debian/control.old
	@-sed -e "s/<insert long description, indented with spaces>/3d Modeler./g" debian/control.old > debian/control
	@-rm -f debian/control.old

deb:
	dpkg-buildpackage -rfakeroot

################################################################

install:
	@-echo -n "Installing                                  "
	@-mkdir -p  $(INSTALL_BIN)
	@-cp bin/debug/freyja $(INSTALL_BIN)
	@-mkdir -p /usr/share/freyja/
	@-cp data/*.mlisp /usr/share/freyja/
	@-mkdir -p /usr/share/freyja/materials/
	@-cp data/materials/*.mat /usr/share/freyja/materials/
	@-mkdir -p /usr/share/freyja/icons/
	@-cp data/icons/*.png /usr/share/freyja/icons/
	@-mkdir -p /usr/share/freyja/palettes/
	@-cp data/palettes/*.pal /usr/share/freyja/palettes/
	@-mkdir -p /usr/share/freyja/plugins/
	@-cp plugins/*.mlisp /usr/share/freyja/plugins/
	@-mkdir -p /usr/share/freyja/plugins/
	@-cp bin/plugins/*.so /usr/share/freyja/plugins/
	@-echo "[done]"


install-debug:
	@-echo -n "Installing debug                            "
	@-cp $(BUILD_DEBUG_DIR)/$(NAME) $(INSTALL_BIN)
	@-echo "[done]"


################################################################

uninstall:
	@-echo -n "Uninstalling                                "
	@-rm -f $(INSTALL_DIR)/$(NAME) 
	@-echo [done]

################################################################

tarball:
	@-cd .. && tar zcvf $(NAME)-$(VERSION).$(BUILD_ID).tar.gz \
		--exclude=bin --exclude=*~ --exclude=.svn  \
		--exclude=*.log --exclude=*.tga --exclude=contrib \
		--totals \
		$(TREE_DIR) 



################################################################
# Unit tests
################################################################

Material.test:
	@-mkdir -p $(BUILD_TEST_DIR)
	gcc -Wall -g -DUNIT_TEST_MATERIAL -DHAVE_OPENGL \
	src/common/Material.cpp -o $(BUILD_TEST_DIR)/Material.test


################################################################
# Plugins
################################################################
PLUGIN_CFLAGS=-Wall -g -Isrc -Iplugins
PLUGIN_LD_FLAGS=-lm -ldl -lfreyja -lhel0 -lmgtk -lstdc++ -shared -fPIC -ldl -rdynamic 
PLUGIN_LD_FLAGS += --warn-unresolved-symbols -Wl
#PLUGIN_LD_FLAGS += -z defs
PLUGIN_BUILD_DIR=bin/plugins

PLUGINS=$(BUILD_DIR)/$(MOD_NAME).so

plug-ins: $(PLUGINS)

$(BUILD_DIR)/$(MOD_NAME).so : $(MOD_OBJS)
	$(CC) $(CFLAGS) $(LD_FLAGS) -o $@ $(MOD_OBJS)

plugins: perlinnoise.so

perlinnoise.so:
	@-mkdir -p $(PLUGIN_BUILD_DIR)
	$(MAKE) plug-ins BUILD_DIR=$(PLUGIN_BUILD_DIR) \
		MOD_NAME=perlinnoise \
		MOD_OBJS="$(PLUGIN_BUILD_DIR)/perlinnoise.o" \
		CFLAGS="$(PLUGIN_CFLAGS)" \
		LD_FLAGS="$(PLUGIN_LD_FLAGS)"


