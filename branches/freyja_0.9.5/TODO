
 TODO

 Freyja 0.9.5 ( Development branch )
 =====================================================================

 Hot  
 -----------------------------------------------------------------------------

	* Single joint animation for shishi odoshi test
		- ABI Only in interface for bone keyframe render / edit?
		- Visualize weights over skinned mesh
		- Edge picking
		- Facet knife
		- Make sure you can do: OBJ + SMD dumps for the ASCII groupies
		- Might want to add rotation types or always do 'about center' pivots
			- Pivot: 3d cursor, bbox center, etc
		- Keyframe editor improvements
			- Auto keyframe
			- Finalize the interpolation system in the backend
		- Curve editor ( OpenGL UI based editor )
			- Work OpenGLPrinter into main line build now for text support
		- Rotation cursor with radius sweeps to cursor pos following an arc
			- Also replace the old RotateObject() code to just use cursor
		- Factor the ABI JA I/O out as a class, and port to C++ serialize use
		- Timers for animation playback

	* Skeletal animation
		- Fix bone rendering to support unparented bones that aren't root? 
			- Fix bone world coord
		- Out of heirarchy skeleton rendering / backend support
		- Joint/Bone tool that creates and connects to last on each click

	* Interface
		- Add generic bbox selection back for multivertex editing, etc
		- Trim out 'dead' events, esp ones registering to mgtk
		- Two window layout for curve / viewport usage
		- Make viewport 'windows' abstract with seperate controls
			- Support for dynamic resizing and 2/3/4 layouts
			- FreyjaRender -> OpenGLContext, *ViewportRenderer
			- FreyjaControl -> Freyja3d, *ViewportControl
			- Combine controls and view into a seperate class/pkg
			  This will make it easier to scale and fix UI issues
		- Sphere brush for weight painting, etc
		- Perferences, init-dev.mlisp
		- Camera render mode for viewport
			- OpenGL depth / culling / etc control?
		- Remove state value from all mlisp toggle widgets
		  ( they have a set func )
		- VFS needs to provide metadata like XOR keys, size, offset, etc


 Modeling
 -----------------------------------------------------------------------------

	* Box modeling
		- Loop cuts needed for box modeling
		- Subdiv ABI
		- Direct edge selection
		- Spline interface
		- Improve extrude UI
		- Bi-symmetry modeling support

	* Sphere/ray brush ( aka paint interface )
		- Paint with ray test
		- DMAP geometery brush interface
		- Weight painting			
		- Paint on texture with GIMP interface hooks
		- Bbox/Sphere/Magnet brushes

	* Surfaces
		- Patch ABI

	* libfreyja specific
		- Refine 0.9.x ABI / API
		- Merge 'Dancer' libfreyja 0.10 editor features and plugins
		- Documentation
		- State machine should only use C API for abstraction
		- Fix Collapse edges, etc req vertex refs
		- Add vertex/polygon list based texcoord mapping methods to ABI
		- Add subdiv algorithms like catmull-clark, n-patches, etc
		- Add polymesh CSG back ( face intersection )
		- Subdivision Loop and Sabin/Doo surfaces
		- Mesh/Vertex mirroring
		- Polymapped normal support? ( or UVMapped/smoothing group normals )
		- Primitives: Cone / Disk / Cylinder ? ( Not polygonal interface )
		- API interfaces for 'Copy/cut/paste' and 'Rot/Pos/Scale/etc'?

	* freyjaPak ( VFS )
		- Encryption support
		- Direct set functions to import / export
		- New vfs plugin UI
		- Buffered/fileread/filewrite file plugin interface

	* Lasso and bounding box selections

	* Gobal mesh UIDs ala bones/joints to remove need for model+mesh reference

	* UI to toggle group color rendering and set color

	* Mesh / Vertex / Face transforms fully working in dev branch

	* Billboard/sprite support outside edit data for user diagrams and icons

	* Polygon winding control ccw/cw/etc, and render culling options

	* Interactive Tristrip creation tool to replace the old point and connect
   	  polgon creation some people seem to love

	* Partial mesh cut / copy / paste fully working with at least meshes

	* Selected mesh shader / color option

	* Make Mesh enforce only 1 kind of Face type in the sense of:
		- PolyMapping UV / Normal / etc

	* Better UV unwrap ( write smart algorithms for projections )

	* Add material colors for 'editing while rendering'? ( seems bad idea )

	* Allow user to set radius of vertex and texcoord picks ( hook up )

	* Add back transforms for selected faces/groups in UV editor

	* Seperate smoothing groups and face 'clusters' 
		- Just have to separate smoothing action from group assignment

	* Refine Point / edge / face / mesh editing tools

	* Normal editor / Extrude guide / Control point view

	* Extrude multiple adj faces

	* Merge adj faces

	* Selection masks saving as layers?

	* Guided UV unwrap ( face pick )



 Animation
 -----------------------------------------------------------------------------

	* Pick bones with mouse

	* Curves support for keyframe editor

	* Bone H-matrix / inverted H-matrix

	  Bones with transforms in/outside of hierarchy

	* New skeleton system

	* Keyframe editor that makes sense unlike 0.8.x series

	* Various joint types: hinge, b&s, etc

	* IK solver and interface

	* Deform skeletal mesh animation with animation blending

	* Timer for animation playback and keyframe timing

	* Path animation


 Misc
 ----------------------------------------------------------------------------

	* Refactor to use true singletons/other patterns where systems require

	* Break up Render/Control into 'controls with views'

	* Simulation package revival

	* Generated python plugin API from C ABI ( replace old, static version )

	* Go do a sweep of all the plugins to make sure they use new ABI

	* DBUS support now that it's hit stable ABI at 1.0

	* Event logging in UI
		- Separate events log into textbox dialog with freyja_logf(..)
		- Separate status bar only messages with freyja_statf(..)
		- Allow follow control from freyja_print with s[0] = !, ?, etc
		- Use status bar for mouse over tooltips also

	* Make all mlisp events use ids instead of numbers

	* GNOME MIME setup script

	* Remappable windows drive support

	* Rewrite mstl Map to be a cleaner API


 Rendering
 ----------------------------------------------------------------------------

	* GLSL shader 'materials' generated from tree UI
		- Heat fx shader ( turb with frag prob best )
		- DoF shader

	* Animated texcoords

	* Normal maps, DOT3, and maybe matrix palette skinning test renders

	* glColorMaterial use

	* Shadow maps and volumes

	* Different skyboxes/floors for animation view


 Event system / Interface
 ----------------------------------------------------------------------------

	* libmgtk specific
		- 'Radio object' to auto uncheck toggle event when others trigger
		- Mlisp to replace Resource
		- MlispEvent to replace ResourceEvent
		- Radio buttons / menu items?
		- Mlisp doesn't lookup symbols for like "true" if just setq
		- Mlisp wish list: garbage collection, fully featured lisp

	* Viewport view / control abstraction
		- Reimplement and enable Camera system
		- Add camera editing back

  	* Scene tree view for all objects in scene
		- Parenting interface

	* Cursor operations
		- Vertex ops undo (all)
		- Render changes and constantly update
		- Enforce rule when confirmed by click actually modify
		- Opposite mouse click 'undo' by not modifying
		- Don't scale cursor
		- Cursor rotation pivot setting for vertices

	* Object proprieties dialog?
		- Hidden property / Show object
		- Visibility layers using flags

	* Event system refinement { Undo, Redo, Macro, Playback }

	* Enforce usage of Observer and Command patterns for all events

	* Generic control points

	* Multiple select ops vs single select

	* MsgBox assert system to fix errors faster

	* 3d text using just libfreetype

	* Breakup GUI into modules


 Plugins
 ----------------------------------------------------------------------------

	* LineageII
		- Finish LinageII import for all versions of the game
		- Finish LineageII pak vfs plugin

	* Find and fix all the bugs caused by all new backend

	* Check PSK and Halflife unit tests for anim

	* Editor plugins in freyja using UI hooks like:
	  freyja_append_eventid, event system, and freyja_append_item_to_menu

	* Add Oblivion plugin?

	* Finish Morrowind import plugin (nif4)

	* Add support for 'nvidia' ASE skel animation (ase)

	* Finish PSK export (PSKModel)

	* UTX export (UTPackage)

	* Material plugins
		- Cg shaders
		- GLSL shaders


 User requests
 ----------------------------------------------------------------------------

== Brillant idea #54 ==
<Mongoose> GNOME should have 'emblems' icons for toolbars
<Mongoose> if I make special custom file open icons they'll never match your theme 
<Mongoose> ohh... I wonder if I could make a custom widget to do that...
<Mongoose> I could pull the pixmap from the stock icon and alter it and send it back to the app
<Mongoose> then it'll always match the theme... damn I'm smart...


== Python plugin I/O ==
<exarkun> How about this
<exarkun> class StructFile(file):
<exarkun>     def readObjects(self, fmt):
<exarkun>         b = self.read(struct.calcsize(fmt)) # check length, etc
<exarkun>     return struct.unpack(fmt, b)
<exarkun> er, more indentation there
<Mongoose> isn't that just host size and order?
<exarkun> (also, that's it)
<exarkun> no, struct lets you specify endianness
<exarkun> < is little, > is big
<exarkun> eg, '>f' is a big endian float
<Mongoose> I'll look into using that instead of array and making an abstraction
<Mongoose> thanks
<exarkun> I've never used python on a 64 bit platform, or tried to write 64 bit clean code, so I'm not sure how size is handled, but I know other people have, so I think there is some support for dealing with that
<exarkun> you're welcome


== UI request #251 ==
<DMJC> basically you clicked on object vertex or poly.. then you sactually that's wrong..
<DMJC> in truespace you selected the object..
<DMJC> then you could click to select vertex/edge/poly..
<DMJC> then you could rotate/scale/move...
<DMJC> you didn't have 4 interfaces.. one for each of those types..
<DMJC> you had that one 3x3 grid..
<DMJC> made modelling piss easy
<DMJC> I can whip up meshes in under 5 mins with that
<DMJC> max/maya lose you in their interfaces..
<DMJC> top window the important thing is not what's laid out there except the bottom part..
<DMJC> you could cram that in one corner..
<DMJC> as long as it's done like that
<DMJC> I'll find a truespace screenshot for you
<Mongoose> cool
<DMJC> http://www.caligari.com/products/trueSpace/ts5/Brochure/images/ts5main.jpg
<DMJC> that hasn't got the awesome coordinate editor onscreen
<DMJC> basically they threw out menus..
<DMJC> and went for small dialogues and buttons
<DMJC> it's a perfect example of less is more






