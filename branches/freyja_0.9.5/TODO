
 TODO
 =============================================================================

 Freyja 0.9.5.14	2007.07.02
 -----------------------------------------------------------------------------

 * Animation Track / Keyframe snippets in UI
 * Camera, CameraABI, CameraKeyframe, CameraTrack
 * freyja_tombraider.cpp: Replace arcachic 'List.h' use.
 * template Track needs TrackInstance/KeyframeInstance to hold 'tween'



 Freyja 0.9.5.15	TBD
 -----------------------------------------------------------------------------

 * FIX TTF renderer ( glyph settings aren't used )
 	- Add back typesetting for GLPrinter.
 * FIX perlinoise crash.
	- I bet it's the new FreyjaImage 8bit support causing it.
	- BONUS rewrite FreyjaImage, rename as Image, update everything using it.
 * FIX bone name rendering trashing 'icon' colors.

 * Finish up new keyframing + bones ( UI + renderer ).
 	- Keyframes using list + vector ( TLB index:iterators for random access )
	- Bone undo support ( maybe store state from edit mode chord )
 	- (Un)Parenting for bones 
 * Remove LegacyABI use in MeshABI mesh generators.
	- Time for Catmull-Clark 'spheres'?
 * Slerp for QuatKeyframe
 * Light options with drop down menu button: dir/pos/spot?
 * Grid view options with drop down menu button. eg: wire/solid
 * Bone names options with drop down?
 * mgtk Query string support.
 * Lua Widgets: lua mgtk wrapper to allow full interface plugins.
 * Lua binary file I/O wrapper.
 * Rename hel/math.h hel/hel.h for 0.9.6 alpha.
 * mstl SystemIO - remove anything depending on parsestringliteral allocation.
 * Automatic online updates from the modeler itself.
 * Reports: library versions, build dates, etc for easier bug reports.
 * Metadata object eg for map objects ( currently bones are used )
 * Mesh replace stack use with list (as [ordered] queue/stack).
 * SystemIO StringLiteral should not allocate -- verify everything using it 


 Freyja, Development branch 0.9.5 ( Current )
 -----------------------------------------------------------------------------

 * The way the model graph works in 0.9.5 with all the extensions is 
   going to have to be redesigned for 0.9.6 alpha.
	- Edge based editing as a focus instead of vertex.
	- Better reference graphs so you can tell how vertex/edge/facets are 
	  connected and interact -- also to give speed boosts for common ops.
	- Mesh should be broken up into subclasses eg 'weightmanager', 'utils'.

 * Verify math library, enforce automated testing at build.
	- Make sure everything is using col hel::Mat44 correctly now.
		- 'Raypick vs FK'
	- Make sure everything is converting between types properly.
	- Use this as a chance to rework types for 0.9.6
		- Quat to become XYZW order, so there will be world peace.

 * Edge editing.
	- Replace wireframe renderer with edge renderer.
	- Mesh::RebuildEdgeGraph()
	- Mesh::RebuildPlanes()
	- RELATED Cache s-edge results until light / mesh moves.

 * Single joint animation shishi odoshi tutorial demo.

 * Subdiv knife.

 * Hermite spline editor support.

 * Continue to break up ye olde FreyjaControl (legacy UI) by editing mode.
	- Move bone control in FreyjaControl to BoneEv class.
	- Move out all specific the e/Ev methods.
	- Move texcoord/object switch UI into their own controls.

 * Fix groups box ids -- go back to proper bitflags like in 0.9.3/4.

 * Refactor the file dialog code based on the new import/export test.
	- Reduce the import/export test.
	- Likely go with the popular 'guesser' for open and native for save.

 * Fix mouse cursor control.
 	- Quat based rotation cursor?
	- Rotation modifier can 'lock' and may want bigger targets for general use.
	- Rotation not reset before object creation/selection sometimes causing bug.
	- Transform has a 'pop' or 'jump' in model mode.

 * Basic geometry previews using blend vertices buffer - avoid data mutators.
	- Faces/Face should use blend vertices buffer, then 'write' results later

 * UV unwrap improvements.
	- Add unwrap to cyn uvmap ( no overlayed uv polygons, fill quad, etc )

 * Add the simple Bezier patch polygon mesh back.

 * Shading for editing flat / face normal / etc

 * Merge pak vfs into main UI.  Currently it's an awkward UI plugin.
	- Change vfs file list to have mixed dir/files in one pane to follow HIG.

 * Skeletal animation refactor.
	- IK solver and interface
		- Fix remaining FK issues before IK starts!
	- Ensure everything is using relative joint transforms now.
	- Undo/Redo.
 	- Skeleton::Swizzle() coord-transforms, etc
	- Options for 3d 'icon' shading
	- Visualize weights over skinned mesh
		- Select/highlight2 vertices by bone
	- Keyframe editor improvements
		- Move to time based UI and new containers 
		- Finalize the interpolation system in libfreyja
		- Curve editor ( OpenGL UI based editor )
	- Hookup threaded timers/time based renderer for animation playback mode.
	- Skeleton level transforms should only handle root/children.
	- Better 'pose' interface: transparency on cursors / bones, scaling UI.
	- Chain Copy/Paste, Mirror,  
	- Separate world updates from mesh skinning code.
	- Editor needs to revert back to 'Bone' transforms to edit keys in key mode
	- Attachments ( Could be metadata now, close this? )
	- Various joint types: hinge, ball&socket, etc
	- New Timer for animation playback and keyframe timing
	- Rework weight system to support zeroed weights and grouping
	- Merge the two bone rendering systems once alpha is done
	- Componet flags to limit joint DoF
	- Channels support
	- Ordering support
	- Type of transform support
	- Constraints support
	- Ref weights from vertex to fix blending issues

 * Make generic plugin interface for new UI control points.

 * ZIP file based pak format for freyja format models w/ textures, etc?
	
 * Mesh parenting and grouping.

 * Finish up the UI icon set and '3d icons'.

 * Improve mesh render support.
 	- VBO callback for rmesh (de)alloc / (un)lock ( allows VBOs )
	- Remove the old crappy scaling for zoom.
	- Color array / material color support wouldn't be a bad idea.
	- Perhaps limit the modeler to quads/tris... always a sore subject  =)
	- MeshRenderInstance or rework old Mesh, since it has to sync anyway
		- mFaceIndices
		- mPolyMappedVertices
		- mPolyMappedNormals
		- mPolyMappedTexcoords
		- DepthSortAlphaFaces(Ray) - Make a new index array for depth sorting.
	- A better way to flag alpha faces in UI is needed. ( perhaps by material )
		- SortAlphaFaces() - Move alpha faces to end array and store offset.

 * Option for 'autoview' so you can have view options set as edit mode requires.

 * paint support for vertex weld?

 * mstl hash, splay_tree
	 - Texture / GLSL Shader instance manager ( as cache )

 * Vertex extrude

 * Separate grid toggle for the non-orbit windows ( should center on axis too )

 * Undo for subdiv / dmap

 * Combine single/group object modes eg faces... + face = face mode

 * 2 window view mode

 * toolbar down left side for generic edit modes?

 * Freyja bone editing grouping ala vertices... 
	- eg rotate all selected bones to 'follow target'

 * UV toggle alpha face flag

 * UV mirror via scale

 * sphere brush for paint tool

 * Auto build system for win32

 * XML link support eg <link name="miko-weight.xml" type="weight" />

 * Texture buffer expansion:
 	- Options to rotate pixmaps? 
	- diffuse, heightmap, normalmap, specular map, decal map, etc

 * Scenegraph: requires 'view' mode vs 'edit' mode


 Freyja, Dancer/Kagura 0.9.6 (Public Alpha-Beta, TBD)
 -----------------------------------------------------------------------------

 * Formalized unit tests and reporting.

 * Review for possible offical packages with Ubuntu/Debian.

 * Seperate renderer and UI into their own libraries.

 * MSTL review for rewrite.  Wish: generic container item, opt, etc.
	- It might be a good idea to have true vector and vectorarray containers.
	- hash
	- avl_tree
	- splay_tree for cache mostly
	- Allow API compatibility breaks as needed.
	- Rewrite Map and RedBlackTree as map and rb_tree.

 * APIs / designs to be finalized
	- Optmize Mesh to avoid wasting texCoords when unused by vertices
	- Use status bar for mouse over tooltips also?
	- Path animation?
	- New resource event system with UIDs and event transparent buckets?
	- Object proprieties dialog?
		- Hidden property / Show object
		- Visibility layers using flags
	- Cg support plugin?
	- Force Copy / Cut / Paste / Dupe / Split / Merge for every object type?
	- Multi-object modes might need new UI design to avoid user confusion?
	- Add material colors for 'editing while rendering'? ( seems bad idea )
	- Face extruding maybe doesn't need to be pick ray guided (confusing?)
	- Hook up UV transforms, and flesh them out.
	- Track and Keyframe classes 
		- Keyframe vector issue
	- Add Meld/fMuted support for Vertex operations in Mesh
	- Add menu action to clamp texcoords on selected Mesh
	- Fix all remaining mesh issues like uv editing and manual welds
	- Mesh::Merge() doesn't merge animations ( shouldn't matter? )
	- Mesh::WeldTexCoords() is non-functional.

 * Visual scaling of cursors may need to be adjusted during zoom != 1.0f
	- This means sphere/ray targets must be scaled to match visual also

 * Brush system for vertex weight and texture on model painting

 * Material sphere rotation controlled by slider.

 * Certain modes should enable certain rendering options by default, but allow
   user overrides too.  eg [Vertex] + [Select] enables point renderer.

 * Full Light editor.

 * Camera editor.

 * Async I/O test with special memory pool, etc ( killable I/O threads )

 * Texture buffer array per material for: diffuse/normal/gloss/data/dudv/etc
	- Bring back old TextureManager to avoid wasting texture memory

 * Replace MaterialEv Load/Save material with libfreyja format+metadata.

 * /usr/share seeding age control to /home/ plugins via version.

 * freyjaPak ( VFS )
	- Encryption support
	- Direct set functions to import / export
	- New vfs plugin UI
	- Buffered/fileread/filewrite file plugin interface

 * COLLADA 1.4 plugin with Import/Export.

 * Add in simple collision ( eg Dropping lantern on chair scene )

 * Style / legal / contact updates for all code.

 * User prefs default material and user prefs reset to defaults.

 * Use tree widget for scene graph with mesh/skel.bone/mats.

 * Break up UVMaps by smoothing groups/materials per mesh via toggle option.

 * MOTD / autoupdate plugin.

 * Renable 'direct' vertex animation creation by request.
	- Letting the user move selected points in vertex morph mode.


 Freyja, Dancer/Kagura 0.9.6 (Beta-Release, TBD)
 -----------------------------------------------------------------------------

 * GNOME MIME setup script

 * PluginManager ( enable / disable plugins, descriptions, etc )

 * Log window for more complete error / warning reporting.

 * Query dialog with multitype support.
		struct query { string msg, type defaultvalue, type eventId }

 * Import/export plugin changes
	- dropdown should change filename
	- Threaded import/export?
		- fLocked support
		- fSelectedFIO support
	- Detailed error messages ( Pass back a String to generate msgbox ) 
	- FreyjaType flags usage ( eg mesh only, mesh+skeleton, etc )
	- Freyja selection usage ( eg export selected )
	- Optional memory buffer usage instead of file/url ( great for paks )
	- These could be setup inside of per plugin preferences, so
		  the ABI doesn't have to change ala states
	- Open/Save buttons on filedialogs

 * Import/Export submenus like the Plugins.. submenu
	- Selection mask support
	- File dialogs should be able to auto append correct extensions.

 * Viewport view / control abstraction
	- Reimplement and enable Camera system
	- Add camera editing back

 * GLSL shaders
	- FreyjaOpenGL should remap shaders to make sure two of the same
		  shader aren't loaded at once ( just pass back the orig program id )
	- Refraction demo shader ( turbulence with frag prob best )
	- Depth of field demo shader

 * Octree for vertex/object pick culling and rendering optimization.

 * Projectors.

 * Phong Lighting.  ( Just add toggle for the GLSL shader? )

 * Object mirror instance editing.  ( mostly for Box modeling )

 * Misc
 	- Ensure no transform algorithms are not done in client.
	- Move all transforms in UI to ::Transform and hook-up undo/redo for all
	- Edge editing needs to be top level 'edit type' like face in UI
	- Face splitting needs to be user controllable
	- Stiching mode for making faces from existing vertices
		- This is an old 'Fan favorite' feature of freyja that was removed
		- Stiching existing vertices should be a seperate mode
		- This new implementation will use control points and a quad/tri
			  strip mode for the control point renderer to avoid writes to mesh
		- Have the user press <ctrl> mouse2 to generate the polygons


 Freyja, Proposed (TBA)
 -----------------------------------------------------------------------------

 Modeling
 -------------------------------------------------------------------------

 * Node editor for scene graph control

 * Box modeling
	- Add back UI for vertex welding 
	- Edge picking / editing / subdiv / extrude
	- Instancing for bisymmetry ( use a flag to enable a render mode )
	- Loop cuts needed for box modeling
	- Subdiv ABI
	- Direct edge selection
	- Spline interface
	- Improve extrude UI
	- Bi-symmetry modeling support

 * UV editing
	- Add back UV/Texcoord transforms for unwrapping editing
	- Texcoord split
	- Texcoord transforms with selected faces as UVMap
	- bounding box / fitter algorithm 
	- UVMaps replaces by selected faces
	- UV color button for default bg color
	- Selectable patterns like colorcube, checkerboard, gray as bg

 * Sphere/ray brush ( aka paint interface )
	- Paint with ray test
	- DMAP geometery brush interface
	- Weight painting			
	- Paint on texture with GIMP interface hooks
	- Bbox/Sphere/Magnet brushes

 * Surfaces
	- Patch ABI

 * libfreyja specific
	- Refine 0.9.x ABI / API
	- Merge 'Dancer' libfreyja 0.10 editor features and plugins
	- Documentation
	- State machine should only use C API for abstraction
	- Fix Collapse edges, etc req vertex refs
	- Add vertex/polygon list based texcoord mapping methods to ABI
	- Add subdiv algorithms like catmull-clark, n-patches, etc
	- Add polymesh CSG back ( face intersection )
	- Subdivision Loop and Sabin/Doo surfaces
	- Mesh/Vertex mirroring
	- Polymapped normal support? ( or UVMapped/smoothing group normals )
	- Primitives: Cone / Disk / Cylinder ? ( Not polygonal interface )
	- API interfaces for 'Copy/cut/paste' and 'Rot/Pos/Scale/etc'?

 * Lasso and improved bounding box selections

 * Gobal mesh UIDs ala bones/joints to remove need for model+mesh reference

 * UI to toggle group color rendering and set color

 * Mesh / Vertex / Face transforms fully working in dev branch

 * Billboard/sprite support outside edit data for user diagrams and icons

 * Polygon winding control ccw/cw/etc, and render culling options

 * Interactive Tristrip creation tool to replace the old point and connect
   	  polgon creation some people seem to love

 * Selected mesh shader / color option

 * Make Mesh enforce only 1 kind of Face type in the sense of:
	- PolyMapping UV / Normal / etc

 * Better UV unwrap ( write smart algorithms for projections )

 * Allow user to set radius of vertex and texcoord picks ( hook up )

 * Add back transforms for selected faces/groups in UV editor

 * Seperate smoothing groups and face 'clusters' 
	- Just have to separate smoothing action from group assignment

 * Refine Point / edge / face / mesh editing tools

 * Normal editor / Extrude guide / Control point view

 * Extrude multiple adj faces

 * Merge adj faces

 * Selection masks saving as layers?

 * Guided UV unwrap ( face pick )


 Animation
 --------------------------------------------------------------------------

 * Curves support for keyframe editor

 * Bone H-matrix / inverted H-matrix

 * Bones with transforms in/outside of hierarchy


 Rendering
 -------------------------------------------------------------------------

 * Material tree/node editor

 * Animated texcoords

 * glColorMaterial optional use

 * Shadow maps and volumes

 * Different skyboxes/floors w/ water reflection for animation view


 Event system / Interface
 -------------------------------------------------------------------------

 * libmgtk specific
	- 'Radio object' to auto uncheck toggle event when others trigger
	- Mlisp to replace aging Resource based mlisp domain language
	- MlispEvent to replace ResourceEvent
	- Mlisp doesn't lookup symbols for like "true" if just setq
		- This is by design, but maybe it should change now.

 * Interface
	- Two window layout for curve / viewport usage
	- Make viewport 'windows' abstract with seperate controls
		- Support for dynamic resizing and 2/3/4 layouts
		- FreyjaRender -> OpenGLContext, *ViewportRenderer
		- FreyjaControl -> Freyja3d, *ViewportControl
		- Combine controls and view into a seperate class/pkg
			  This will make it easier to scale and fix UI issues
	- Camera render mode for viewport
		- OpenGL depth / culling / etc control?
	- Remove state value from all mlisp toggle widgets ( use the set func )
	- Have a widget numeric set function like toggle widgets have for bool 
	- VFS UI needs to provide metadata like XOR keys, size, offset, etc		- Extra viewmode to toggle groups colors on/off
	- Two-way python function/script UI, reporting ala C plugins
		  or offically endorse pygtk, etc

   * Scene tree view for all objects in scene
	- Parenting interface

 * Cursor system
	- Consistency across cursor usage
	- Orbital / Camera view need special orientation constraints
	- Hierarchical systems like skeletons need fixes for world cursor 
	- Object modifiers should update cursor loc/rot/size only
		- On object select update cursor values
		- On modifier mode update cursor values via a 'bump' select (reuse)
	- Rotation cursor with radius sweeps to cursor pos following an arc
		- Also replace the old RotateObject() code to just use cursor
		  on select mode switch as per new design to prevent feedback loops
	- Ray/Vector based orbital view cursor guides ( 'go where I want' )
	- Rotation cursor needs final, real implementation added now
		- Circle around projected center or do something equally clever
			  for more tactical control
	- Vertex ops undo (all)
	- Render changes and constantly update
	- Enforce rule when confirmed by click actually modify
	- Opposite mouse click 'undo' by not modifying
	- Don't scale cursor
	- Cursor rotation pivot setting for vertices

 * Event system refinement { Undo, Redo, Macro, Playback }

 * Enforce usage of Observer and Command patterns for all events

 * Generic control points refinement

 * Multiple select ops vs single select


 Misc
 --------------------------------------------------------------------------

 * Refactor to use true singletons/other patterns where systems require

 * Simulation package revival

 * DBUS support now that it's hit stable ABI at 1.0?

 * Physics

 * L-System


 Style Guidelines Codification
 --------------------------------------------------------------------------

 * Attributes start with "m" prefix to avoid issues with "_" in some compilers.  

 * Camel case method names starting with capital letter.

 * Keep sections as needed in larger classes and methods alphanumeric sorted.

 * Stop prototyping in header files -- make a new object before you start.

 * Use comment blocks for method description.  No per method histories!

 * Place inline methods over 1 line outside class at the bottom of the header.







