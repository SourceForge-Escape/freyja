
 TODO

 Freyja 0.9.5 ( Development branch )
 =====================================================================

 Hot  
 -----------------------------------------------------------------------------

	* FPS cap setting in mlisp

	* Mark face alpha in UV / selected faces ( For depth sorting list )

	* SMD plugin option to save mesh prompt

	* Reverse bone rendering direction option <-- --->  large part to leaf

	* Assertion dialog boxes with optional handling 
	  ( many plugins cause asserts right now, and they're being reported 
		as crashes )

	* Bones and bone transforms in same units!
		- Also finalize delta vs abs

	* Import/Export submenus like the Plugins.. submenu
		- Selection mask support
		- Flags for disabling mesh/skeleton/animations/etc
		- File dialogs should be able to handle 
		  *.ms3d and auto append instead of doing *.milkshape

	# Rotation cursor fixes for rendering vs actual transform.
	# Multi-object modes might get a new UI design to avoid confusing the user.
	# Basic geometry previews will use blend vertices buffer to avoid changing actual data.
	# Hook up UV transforms, and flesh them out.
	# Update the ABI with new transforms, and avoid doing transform algorithms in client.

	* Single joint animation for shishi odoshi test
		- Visualize weights over skinned mesh
		- Keyframe editor improvements
			- Finalize the interpolation system in the backend
		- Curve editor ( OpenGL UI based editor )
			- Work OpenGLPrinter into main line build now for text support
		- Timers for animation playback
		- Allow plugin usage of objects that are 'sparse' eg allow NULL objects
		- Make generic plugin interface for new UI control points
		- Renable 'direct' vertex animation creation
		  ( Letting the user move selected points in vertex mode )
		- Ref weights from vertex to fix blending issues
		- ZIP file based pak format for freyja format models w/ textures, etc

	* Misc
		- Move all transforms in UI to ::Transform and hook-up undo/redo for all
		- Edge editing needs to be top level 'edit type' like face in UI
		- Face splitting needs to be user controllable
		- Face extruding maybe doesn't need to be pick ray guided (confusing?)
		- Face flag for marking faces that need to be depth sorted... 
			- Yeah, I couldn't stand it any longer
		- Stiching mode for making faces from existing vertices
			- This is an old 'Fan favorite' feature of freyja
			- Stiching existing vertices should be a seperate mode
			- This new implementation will use control points and a quad/tri
			  strip mode for the control point renderer to avoid writes to mesh
			- Have the user press <ctrl> mouse2 to generate the polygons
		- Mesh parenting and grouping?
		- Copy / Cut / Paste / Dupe / Split / Merge for every object type?
		- Generic texture lists for materials: 
			- Shaders can use them for normal maps, gloss, data, etc

	* To be finalized
		- Track and Keyframe classes 
			- Keyframe vector issue
		- Add Meld/fMuted support for Vertex operations in Mesh
		- Add menu action to clamp texcoords on selected Mesh
		- Fix all remaining mesh issues like uv editing and manual welds
		- Mesh::Merge() doesn't merge animations ( shouldn't matter for now )
		- Mesh::WeldTexCoords() is non-functunal 
		- Mesh::Serialize(...) for binary Files needs to be updated for format

	* Skeletal animation
		- Rework weight system to support zeroed weights and grouping
		- Merge the two bone rendering systems once debugging is done
		- Fix bone bind, bindtoworld setup in backend



 Modeling
 -----------------------------------------------------------------------------

	* Node editor for scene graph control

	* Box modeling
		- Add back UI for vertex welding 
		- Edge picking / editing / subdiv / extrude
		- Instancing for bisymmetry ( use a flag to enable a render mode )
		- Loop cuts needed for box modeling
		- Subdiv ABI
		- Direct edge selection
		- Spline interface
		- Improve extrude UI
		- Bi-symmetry modeling support

	* UV editing
		- Add back UV/Texcoord transforms for unwrapping editing
		- Texcoord split
		- Texcoord transforms with selected faces as UVMap
		- bounding box / fitter algorithm 
		- UVMaps replaces by selected faces
		- UV color button for default bg color
		- Selectable patterns like colorcube, checkerboard, gray as bg


	* Sphere/ray brush ( aka paint interface )
		- Paint with ray test
		- DMAP geometery brush interface
		- Weight painting			
		- Paint on texture with GIMP interface hooks
		- Bbox/Sphere/Magnet brushes

	* Surfaces
		- Patch ABI

	* libfreyja specific
		- Refine 0.9.x ABI / API
		- Merge 'Dancer' libfreyja 0.10 editor features and plugins
		- Documentation
		- State machine should only use C API for abstraction
		- Fix Collapse edges, etc req vertex refs
		- Add vertex/polygon list based texcoord mapping methods to ABI
		- Add subdiv algorithms like catmull-clark, n-patches, etc
		- Add polymesh CSG back ( face intersection )
		- Subdivision Loop and Sabin/Doo surfaces
		- Mesh/Vertex mirroring
		- Polymapped normal support? ( or UVMapped/smoothing group normals )
		- Primitives: Cone / Disk / Cylinder ? ( Not polygonal interface )
		- API interfaces for 'Copy/cut/paste' and 'Rot/Pos/Scale/etc'?

	* freyjaPak ( VFS )
		- Encryption support
		- Direct set functions to import / export
		- New vfs plugin UI
		- Buffered/fileread/filewrite file plugin interface

	* Lasso and bounding box selections

	* Gobal mesh UIDs ala bones/joints to remove need for model+mesh reference

	* UI to toggle group color rendering and set color

	* Mesh / Vertex / Face transforms fully working in dev branch

	* Billboard/sprite support outside edit data for user diagrams and icons

	* Polygon winding control ccw/cw/etc, and render culling options

	* Interactive Tristrip creation tool to replace the old point and connect
   	  polgon creation some people seem to love

	* Partial mesh cut / copy / paste fully working with at least meshes

	* Selected mesh shader / color option

	* Make Mesh enforce only 1 kind of Face type in the sense of:
		- PolyMapping UV / Normal / etc

	* Better UV unwrap ( write smart algorithms for projections )

	* Add material colors for 'editing while rendering'? ( seems bad idea )

	* Allow user to set radius of vertex and texcoord picks ( hook up )

	* Add back transforms for selected faces/groups in UV editor

	* Seperate smoothing groups and face 'clusters' 
		- Just have to separate smoothing action from group assignment

	* Refine Point / edge / face / mesh editing tools

	* Normal editor / Extrude guide / Control point view

	* Extrude multiple adj faces

	* Merge adj faces

	* Selection masks saving as layers?

	* Guided UV unwrap ( face pick )



 Animation
 -----------------------------------------------------------------------------

	* Curves support for keyframe editor

	* Bone H-matrix / inverted H-matrix

	  Bones with transforms in/outside of hierarchy

	* New skeleton system

	* Keyframe editor that makes sense unlike 0.8.x series

	* Various joint types: hinge, ball&socket, etc

	* IK solver and interface

	* Timer for animation playback and keyframe timing

	* Path animation

	* Channels support
		- Ordering support
		- Type of transform support
		- Constraints support


 Misc
 ----------------------------------------------------------------------------

	* Refactor to use true singletons/other patterns where systems require

	* Break up Render/Control into 'controls with views'

	* Simulation package revival

	* Go do a sweep of all the plugins to make sure they use new ABI

	* DBUS support now that it's hit stable ABI at 1.0

	* Event logging in UI
		- Separate events log into textbox dialog with freyja_logf(..)
		- Separate status bar only messages with freyja_statf(..)
		- Allow follow control from freyja_print with s[0] = !, ?, etc
		- Use status bar for mouse over tooltips also

	* Make all mlisp events use ids instead of numbers

	* GNOME MIME setup script

	* Remappable windows drive support

	* Rewrite mstl Map to be a cleaner API


 Rendering
 ----------------------------------------------------------------------------

	* GLSL shaders
		- FreyjaOpenGL should remap shaders to make sure two of the same
		  shader aren't loaded at once ( just pass back the orig program id )
		- Heat fx shader ( turb with frag prob best )
		- DoF shader

	* Material tree editor

	* Animated texcoords

	* Normal maps, DOT3, and maybe matrix palette skinning test renders

	* glColorMaterial optional use

	* Shadow maps and volumes

	* Different skyboxes/floors for animation view


 Event system / Interface
 ----------------------------------------------------------------------------

	* libmgtk specific
		- Automate callbacks from mlisp directly? (write events in just mlisp)
		- Mlisp wish list
			- Fully featured lisp with C bindings ( dangerous )
			- Garbage collection
		- 'Radio object' to auto uncheck toggle event when others trigger
			- Radio buttons / menu items?
		- mgtk Event type to replace numeric event ids
		- Mlisp to replace Resource
		- MlispEvent to replace ResourceEvent
		- Mlisp doesn't lookup symbols for like "true" if just setq
		- String pop-up dialog prompts ( from C/C++ )

	* Interface ( cold, was hot )
		- Trim out 'dead' events, esp ones registering to mgtk
		- Two window layout for curve / viewport usage
		- Make viewport 'windows' abstract with seperate controls
			- Support for dynamic resizing and 2/3/4 layouts
			- FreyjaRender -> OpenGLContext, *ViewportRenderer
			- FreyjaControl -> Freyja3d, *ViewportControl
			- Combine controls and view into a seperate class/pkg
			  This will make it easier to scale and fix UI issues
		- Camera render mode for viewport
			- OpenGL depth / culling / etc control?
		- Remove state value from all mlisp toggle widgets ( use the set func )
		- Have a widget numeric set function like toggle widgets have for bool 
		- VFS UI needs to provide metadata like XOR keys, size, offset, etc			- Extra viewmode to toggle groups colors on/off
		- Two-way python function/script UI, reporting ala C plugins
		  or offically endorse pygtk, etc

	* Viewport view / control abstraction
		- Reimplement and enable Camera system
		- Add camera editing back

  	* Scene tree view for all objects in scene
		- Parenting interface

	* Cursor system
		- Consistency across cursor usage
		- Orbital / Camera view need special orientation constraints
		- Hierarchical systems like skeletons need fixes for world cursor 
		- Object modifiers should update cursor loc/rot/size only
			- On object select update cursor values
			- On modifier mode update cursor values via a 'bump' select (reuse)
		- Rotation cursor with radius sweeps to cursor pos following an arc
			- Also replace the old RotateObject() code to just use cursor
		  on select mode switch as per new design to prevent feedback loops
		- Ray/Vector based orbital view cursor guides ( 'go where I want' )
		- Rotation cursor needs final, real implementation added now
			- Circle around projected center or do something equally clever
			  for more tactical control
		- Vertex ops undo (all)
		- Render changes and constantly update
		- Enforce rule when confirmed by click actually modify
		- Opposite mouse click 'undo' by not modifying
		- Don't scale cursor
		- Cursor rotation pivot setting for vertices

	* Object proprieties dialog?
		- Hidden property / Show object
		- Visibility layers using flags

	* Event system refinement { Undo, Redo, Macro, Playback }

	* Enforce usage of Observer and Command patterns for all events

	* Generic control points

	* Multiple select ops vs single select

	* MsgBox assert system to fix errors faster

	* 3d text using just libfreetype

	* Breakup GUI into modules


 Plugins
 ----------------------------------------------------------------------------

	* LineageII
		- Finish LinageII import for all versions of the game
		- Finish LineageII pak vfs plugin

	* Find and fix all the bugs caused by all new backend

	* Check PSK and Halflife unit tests for anim

	* Editor plugins in freyja using UI hooks like:
	  freyja_append_eventid, event system, and freyja_append_item_to_menu

	* Add Oblivion plugin?

	* Finish Morrowind import plugin (nif4)

	* Add support for 'nvidia' ASE skel animation (ase)

	* Finish PSK export (PSKModel)

	* UTX export (UTPackage)

	* Material plugins
		- Cg shaders
		- GLSL shaders


 User requests
 ----------------------------------------------------------------------------

== Brillant idea #54 ==
<Mongoose> GNOME should have 'emblems' icons for toolbars
<Mongoose> if I make special custom file open icons they'll never match your theme 
<Mongoose> ohh... I wonder if I could make a custom widget to do that...
<Mongoose> I could pull the pixmap from the stock icon and alter it and send it back to the app
<Mongoose> then it'll always match the theme... damn I'm smart...


== Python plugin I/O ==
<exarkun> How about this
<exarkun> class StructFile(file):
<exarkun>     def readObjects(self, fmt):
<exarkun>         b = self.read(struct.calcsize(fmt)) # check length, etc
<exarkun>     return struct.unpack(fmt, b)
<exarkun> er, more indentation there
<Mongoose> isn't that just host size and order?
<exarkun> (also, that's it)
<exarkun> no, struct lets you specify endianness
<exarkun> < is little, > is big
<exarkun> eg, '>f' is a big endian float
<Mongoose> I'll look into using that instead of array and making an abstraction
<Mongoose> thanks
<exarkun> I've never used python on a 64 bit platform, or tried to write 64 bit clean code, so I'm not sure how size is handled, but I know other people have, so I think there is some support for dealing with that
<exarkun> you're welcome


== UI request #251 ==
<DMJC> basically you clicked on object vertex or poly.. then you sactually that's wrong..
<DMJC> in truespace you selected the object..
<DMJC> then you could click to select vertex/edge/poly..
<DMJC> then you could rotate/scale/move...
<DMJC> you didn't have 4 interfaces.. one for each of those types..
<DMJC> you had that one 3x3 grid..
<DMJC> made modelling piss easy
<DMJC> I can whip up meshes in under 5 mins with that
<DMJC> max/maya lose you in their interfaces..
<DMJC> top window the important thing is not what's laid out there except the bottom part..
<DMJC> you could cram that in one corner..
<DMJC> as long as it's done like that
<DMJC> I'll find a truespace screenshot for you
<Mongoose> cool
<DMJC> http://www.caligari.com/products/trueSpace/ts5/Brochure/images/ts5main.jpg
<DMJC> that hasn't got the awesome coordinate editor onscreen
<DMJC> basically they threw out menus..
<DMJC> and went for small dialogues and buttons
<DMJC> it's a perfect example of less is more


== Web site request ==
<floam> iframes are pretty scary
<floam> you should alter your blogger template to not have any css itself and style it in your real site




