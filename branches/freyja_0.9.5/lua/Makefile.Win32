################################################################
# Target name and Version
################################################################

NAME=luawrapper
MAJOR_VERSION=0
MINOR_VERSION=0
MICRO_VERSION=2
REVSION=3
BUILD_DATE=`date +%Y%m%d`
BUILD_ID=$(BUILD_DATE)
VERSION=$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION).$(REVSION)
ARCHIVE_NAME=lib$(NAME)
API=
#$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION)

################################################################
# Common directories
################################################################

TREE_DIR=lua
SRC_DIR=lua
BUILD_ROOT_DIR=../bin/lua

################################################################
# Common bins
################################################################

-include ../win32.env

DEPS=../deps.sh

MAKE_CMD=make -f Makefile.Win32


################################################################
# Common precompiler defines
################################################################

COMMON_INCLUDES=-I. -I../lua/ -I../mstl/

COMMON_DEFS=-DVERSION=\"\\\"$(VERSION)\\\"\" \
		-DBUILD_ID=\"\\\"$(BUILD_ID)\\\"\" \
		-DPROGRAM_NAME=\"\\\"$(NAME)\\\"\"

COMMON_CFLAGS=$(COMMON_DEFS) $(COMMON_INCLUDES) \
	-DLUAWRAPPER_FOUND -DLUA_FOUND \
	$(WIN32_INC_DIR) 


################################################################

BUILD_SELECT=debug
DEPEND_FILE=depend.win32
BUILD_INSTALL_DIR=$(BUILD_ROOT_DIR)/win32/debug

################################################################

BUILD_DEBUG_DIR=$(BUILD_ROOT_DIR)/win32/debug
BUILD_RELEASE_DIR=$(BUILD_ROOT_DIR)/win32/release
BUILD_TEST_DIR=$(BUILD_ROOT_DIR)/win32/test

INSTALL_PREFIX=/usr
INSTALL_INC_DIR=$(INSTALL_PREFIX)/include
INSTALL_LIB_DIR=$(INSTALL_PREFIX)/lib
INSTALL_BIN_DIR=$(INSTALL_PREFIX)/bin

################################################################

LD_FLAGS=-shared -fPIC $(WIN32_LIB_DIR) -lstdc++ -lm -llua51

RELEASE_CFLAGS=$(COMMON_CFLAGS) \
	-Wall \
	-ffast-math -funroll-loops \
	-fomit-frame-pointer -fexpensive-optimizations -O2

DEBUG_CFLAGS=$(COMMON_CFLAGS) -Wall -g -fPIC -DDEBUG -DEXPERIMENTAL

BASE_DEFS=-I$(SRC_DIR) $(COMMON_CFLAGS)

DO_CC=$(CC) $(CFLAGS) -o $@ -c $<

################################################################

TARGETS=$(BUILDDIR)/$(MODULE)

auto: $(BUILD_SELECT)

targets: $(TARGETS)


################################################################

all: debug release prof

debug:
	@-mkdir -p $(BUILD_DEBUG_DIR)
	$(MAKE_CMD) targets \
	BUILDDIR=$(BUILD_DEBUG_DIR) \
	MODULE="lib$(NAME).dll" \
	CFLAGS="$(DEBUG_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)" \
	CC=$(WIN32_CC) \
	CPP=$(WIN32_CPP) \
	LD=$(WIN32_LD)

release:
	@-mkdir -p $(BUILD_RELEASE_DIR)
	$(MAKE_CMD) targets BUILDDIR=$(BUILD_RELEASE_DIR) \
	MODULE="lib$(NAME).dll" \
	CFLAGS="$(RELEASE_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

prof: 
	@-mkdir -p $(BUILD_PROF_DIR)
	$(MAKE_CMD) targets BUILDDIR=$(BUILD_PROF_DIR) \
	CFLAGS="$(DEBUG_CFLAGS) -pg" \
	LD_FLAGS="$(LD_FLAGS) -pg"

$(DEPEND_FILE):
	@-echo -n Making deps...
	@-echo "# Autogenerated dependency file" > $(DEPEND_FILE)
	@-find $(SRC_DIR) -name "*.cpp" -exec $(DEPS) -I. $(BASE_DEFS) {} \; >> $(DEPEND_FILE)
	@-echo "       [done]"


########################################################################
# Object targets
########################################################################

OBJS = \
	$(BUILDDIR)/Lua.o 

-include $(DEPEND_FILE)

$(BUILDDIR)/$(MODULE) : $(OBJS)
	$(CC) -shared -o $(WIN32_LOCAL_LIB_DIR)/$(MODULE).dll \
    -Wl,--out-implib=$(WIN32_LOCAL_LIB_DIR)/lib$(MODULE).a \
    -Wl,--export-all-symbols \
    -Wl,--enable-auto-import \
    -Wl,--whole-archive $(OBJS) \
    -Wl,--no-whole-archive $(LD_FLAGS)


########################################################################

clean:
	@-rm -f $(DEPEND_FILE)

	@-echo -n "Cleaning emacs files                        "
	@-rm -f `find . -name "*~" -print`
	@-echo "[done]"

	@-echo -n "Cleaning profiling output                   "
	@-rm -f gmon.out
	@-echo "[done]"

	@-echo -n "Cleaning TEST builds                        "
	@-rm -f $(BUILD_TEST_DIR)/*.test
	@-echo "[done]"

	@-echo -n "Cleaning DEBUG builds                       "
	@-rm -f $(BUILD_DEBUG_DIR)/*.o
	@-rm -f $(BUILD_DEBUG_DIR)/$(NAME)
	@-echo "[done]"

	@-echo -n "Cleaning PROF builds                        "
	@-rm -f $(BUILD_PROF_DIR)/*.o
	@-rm -f $(BUILD_PROF_DIR)/$(NAME)
	@-echo "[done]"

	@-echo -n "Cleaning RELEASE builds                     "
	@-rm -f $(BUILD_RELEASE_DIR)/*.o
	@-rm -f $(BUILD_RELEASE_DIR)/$(NAME)
	@-echo "[done]"


################################################################

install: install-lib

install-dev: install-headers

install-bin:
	@-echo -n "Installing bin                              "
	@-cp $(BUILD_INSTALL_DIR)/$(NAME) $(INSTALL_BIN_DIR)
	@-echo "[done]"

install-lib:
	@-echo -n "Installing lib                              "
	@-mkdir -p $(INSTALL_LIB)
	@-cp $(BUILD_INSTALL_DIR)/lib$(NAME).so.$(VERSION) $(INSTALL_LIB)
	@-cd $(INSTALL_LIB) && ln -sf lib$(NAME).so.$(VERSION) lib$(NAME)$(API).$(EXT)
	./libsetup.sh
	@-echo "[done]"

install-headers:
	@-echo -n "Installing headers                          "
	@-mkdir -p $(INSTALL_INCLUDE)/$(NAME)
	@-cp -f $(SRC_DIR)/*.h $(INSTALL_INCLUDE)/$(NAME)
	@-echo "[done]"


################################################################

uninstall-lib:
	@-echo -n "Uninstalling                                "
	@-rm -f $(INSTALL_DIR)/lib$(NAME)$(API).$(EXT).$(VERSION)
	@-echo "[done]"

################################################################

tarball:
	@-$(MAKE_CMD) clean
	@-cd .. && tar zcvf $(TARBALL_NAME).tar.gz \
		--exclude=bin --exclude=*~ --exclude=.svn \
		--exclude=CVS --exclude=*.notar --exclude=spec \
		--exclude=*.log --exclude contrib \
		--totals $(TREE_DIR)
	@-echo "[done]"

backup:
	@-$(MAKE_CMD) clean
	@-cd .. && tar Icvf $(NAME)-$(VERSION)-$(BUILD_ID).tar.bz2 $(TREE_DIR)
	@-echo "[done]"





