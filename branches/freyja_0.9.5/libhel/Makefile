################################################################
# Mongoose <stu7440@westga.edu>
################################################################
# + Cleaner clean
# + Add new include tree
# + Add new flags
# + Install
################################################################

NAME=hel
MAJOR_VERSION=0
MINOR_VERSION=0
MICRO_VERSION=1
BUILD_ID=20040406
VERSION=$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION)
TREE_DIR=libhel
TARBALL_NAME=lib$(NAME)-$(VERSION).$(BUILD_ID)

################################################################

BUILD_SELECT=debug
INSTALL_INC_DIR=/usr/local/include
INSTALL_LIB_DIR=/usr/local/lib
INSTALL_BIN_DIR=/usr/local/bin
API=0

################################################################
# UNIX
CC=gcc
JAVAC=javac
FLAGS=
BUILD_BASE_DIR=bin
EXT=so

########################################
# WIN32
#CC=i586-mingw32msvc-g++
#CPP=i586-mingw32msvc-cpp
#LD=i586-mingw32msvc-ld
#FLAGS=-I/usr/local/include/
#BUILD_BASE_DIR=bin.win32
#EXT=dll

################################################################

BUILD_ROOT_DIR=../bin/libhel
BUILD_DEBUG_DIR=$(BUILD_ROOT_DIR)/debug
BUILD_RELEASE_DIR=$(BUILD_ROOT_DIR)/release
BUILD_PROF_DIR=$(BUILD_ROOT_DIR)/prof
BUILD_WIN32_DIR=$(BUILD_ROOT_DIR)/win32
BUILD_OSX_DIR=$(BUILD_ROOT_DIR)/osx
BUILD_TEST_DIR=$(BUILD_ROOT_DIR)/test
BUILD_INSTALL_DIR=$(BUILD_ROOT_DIR)/$(BUILD_SELECT)
SRC_DIR=hel
LOCAL_INCLUDES=-I../mstl/
LOCAL_LIBS=


################################################################
DEBUG_DEFS=-DDEBUG -DEXPERIMENTAL

BASE_CFLAGS=$(FLAGS) -fPIC -Wall -I. -I../libhel/ \
		-DVERSION=\"\\\"$(VERSION)\\\"\" \
		-DBUILD_ID=\"\\\"$(BUILD_ID)\\\"\" \
		-DPROGRAM_NAME=\"\\\"$(NAME)-$(VERSION)-$(BUILD_ID)\\\"\" \
		$(LOCAL_INCLUDES)

LD_FLAGS=-lm -shared -lstdc++ -fPIC
#LD_FLAGS += -dynamiclib
#LD_FLAGS += -shared

RELEASE_CFLAGS=$(BASE_CFLAGS) \
	-ffast-math -funroll-loops \
	-fomit-frame-pointer -fexpensive-optimizations -O2

DEBUG_CFLAGS=$(BASE_CFLAGS) -g $(DEBUG_DEFS)

BASE_DEFS=-I$(SRC_DIR)

DO_CC=$(CC) $(CFLAGS) -o $@ -c $<

################################################################


TARGETS=$(BUILDDIR)/lib$(NAME)$(API).$(EXT).$(VERSION)

W32TARGETS=$(BUILDDIR)/$(MODULE)$(SHLIBEXT)

auto: $(BUILD_SELECT)

################################################################

release:
	@-mkdir -p $(BUILD_RELEASE_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_RELEASE_DIR) \
	CFLAGS="$(RELEASE_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

debug:
	@-mkdir -p $(BUILD_DEBUG_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_DEBUG_DIR) \
	CFLAGS="$(DEBUG_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

prof: 
	@-mkdir -p $(BUILD_PROF_DIR)
	$(MAKE) targets BUILDDIR=$(BUILD_PROF_DIR) \
	CFLAGS="$(DEBUG_CFLAGS) -pg" \
	LD_FLAGS="$(LD_FLAGS) -pg"

win32:
	@-mkdir -p $(BUILD_WIN32_DIR)
	$(MAKE) w32targets BUILDDIR=$(BUILD_WIN32_DIR) \
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	MODULE="hel0" \
	SHLIBEXT=".dll" \
	CFLAGS="$(DEBUG_CFLAGS) -I/usr/local/include/ -DHELEXPORTSCLASS" \
	LD_FLAGS="$(LD_FLAGS)" \
	LIBS="-lm -lstdc++ -L/usr/local/lib"


depend:
	@-echo -n Making deps...
	@-echo "# Autogenerated dependency file" > depend
	@-find $(SRC_DIR) -name "*.cpp" -exec ./deps.sh -I. $(BASE_DEFS) {} \; >> depend
	@-echo "       [done]"

########################################################################

all: debug release prof

########################################################################

w32targets: $(W32TARGETS)

targets: $(TARGETS)

OBJS = \
	$(BUILDDIR)/ViewVolume.o \
	$(BUILDDIR)/Simulation.o \
	$(BUILDDIR)/Spring.o \
	$(BUILDDIR)/Mass.o \
	$(BUILDDIR)/CollisionObject.o \
	$(BUILDDIR)/BoundingVolume.o \
	$(BUILDDIR)/Vector3d.o \
	$(BUILDDIR)/Matrix.o \
	$(BUILDDIR)/Quaternion.o \
	$(BUILDDIR)/math.o

$(BUILDDIR)/lib$(NAME)$(API).$(EXT).$(VERSION) : $(OBJS) 
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LD_FLAGS)
	@-cp $(BUILDDIR)/lib$(NAME)$(API).$(EXT).$(VERSION) $(BUILDDIR)/lib$(NAME)$(API).$(EXT)

$(BUILDDIR)/$(MODULE).dll : $(OBJS)
	$(CC) -shared -o $(BUILDDIR)/$(MODULE).dll \
    -Wl,--out-implib=$(BUILDDIR)/lib$(MODULE).a \
    -Wl,--export-all-symbols \
    -Wl,--enable-auto-import \
    -Wl,--whole-archive $(OBJS) \
    -Wl,--no-whole-archive $(LIBS)


################################################################

-include depend

################################################################

clean:
	@-rm -f depend

	@-echo -n "Cleaning emacs files                        "
	@-rm -f `find . -name "*~" -print`
	@-echo "[done]"

	@-echo -n "Cleaning profiling output                   "
	@-rm -f gmon.out
	@-echo "[done]"

	@-echo -n "Cleaning TEST builds                        "
	@-rm -f $(BUILD_TEST_DIR)/*.test
	@-echo "[done]"

	@-echo -n "Cleaning DEBUG builds                       "
	@-rm -f $(BUILD_DEBUG_DIR)/*.o
	@-rm -f $(BUILD_DEBUG_DIR)/$(NAME)
	@-echo "[done]"

	@-echo -n "Cleaning WIN32 builds                       "
	@-rm -f $(BUILD_WIN32_DIR)/*.o
	@-rm -f $(BUILD_WIN32_DIR)/*.dll
	@-rm -f $(BUILD_WIN32_DIR)/*.a
	@-echo "[done]"

	@-echo -n "Cleaning PROF builds                        "
	@-rm -f $(BUILD_PROF_DIR)/*.o
	@-rm -f $(BUILD_PROF_DIR)/$(NAME)
	@-echo "[done]"

	@-echo -n "Cleaning RELEASE builds                     "
	@-rm -f $(BUILD_RELEASE_DIR)/*.o
	@-rm -f $(BUILD_RELEASE_DIR)/$(NAME)
	@-echo "[done]"


################################################################

#################################################################

DEB_DIR=/tmp/$(NAME).deb
NAME_DEB=libhel
VERSION_DEB=$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION).$(BUILD_ID)

# Edited for Debian GNU/Linux.

DESTDIR =
NO_DEB=
NO_DEB=local/
INSTALL_BIN=$(DESTDIR)/usr/$(NO_DEB)bin
INSTALL_LIB=$(DESTDIR)/usr/$(NO_DEB)lib
INSTALL_DOC=$(DESTDIR)/usr/share/doc/$(NAME)
INSTALL_SHARE=$(DESTDIR)/usr/share/$(NAME)
INSTALL_INCLUDE=$(DESTDIR)/usr/$(NO_DEB)include
INSTALL_PLUGIN_DIR=$(INSTALL_LIB)/$(BASE_NAME)/modules

clean-deb:
	@-echo -n "Cleaning DEBs                                "
	@-rm -rf $(DEB_DIR)
	@-echo "[DONE]"

debian-package:
	$(MAKE) clean-deb
	$(MAKE) tarball
	mkdir -p $(DEB_DIR)
	cp ../$(NAME_DEB)-$(VERSION_DEB).tar.gz $(DEB_DIR)
	cd $(DEB_DIR) && tar zxvf $(NAME_DEB)-$(VERSION_DEB).tar.gz && mv $(TREE_DIR) $(NAME_DEB)-$(VERSION_DEB) && cd $(NAME_DEB)-$(VERSION_DEB) && make deb-init && make deb

deb-init:
	yes | dh_make -c gpl -s -e mongoose@icculus.org -f ../$(NAME_DEB)-$(VERSION_DEB).tar.gz
	@-cp debian/control debian/control.old
	@-sed -e "s/<insert up to 60 chars description>/Freyja math utils/g" debian/control.old > debian/control
	@-rm -f debian/control.old
	@-cp debian/control debian/control.old
	@-sed -e "s/<insert long description, indented with spaces>/3d Modeler./g" debian/control.old > debian/control
	@-rm -f debian/control.old

deb:
	dpkg-buildpackage -rfakeroot

install: install-lib install-headers

################################################################

install-bin:
	@-echo -n "Installing bin                              "
	@-cp $(BUILD_INSTALL_DIR)/$(NAME) $(INSTALL_BIN_DIR)
	@-echo "[done]"


install-lib:
	@-echo -n "Installing lib                              "
	@-mkdir -p $(INSTALL_LIB)
	@-cp $(BUILD_INSTALL_DIR)/libhel$(API).$(EXT).$(VERSION) $(INSTALL_LIB)
	@-cd $(INSTALL_LIB) && ln -sf lib$(NAME)$(API).$(EXT).$(VERSION) lib$(NAME)$(API).$(EXT)
	./libsetup.sh
	@-echo "[done]"

install-win32:
	@-echo -n "Installing win32 build                   "
	@-cp $(BUILD_WIN32_DIR)/*.a $(BUILD_WIN32_DIR)/*.dll $(INSTALL_LIB)
	@-echo "[done]"

install-headers:
	@-echo -n "Installing headers                          "
	@-mkdir -p $(INSTALL_INC_DIR)/$(SRC_DIR)
	@-cp -f $(SRC_DIR)/*.h $(INSTALL_INC_DIR)/$(SRC_DIR)/
	@-echo "[done]"

################################################################

uninstall-lib:
	@-echo -n "Uninstalling                                "
	@-rm -f $(INSTALL_DIR)/lib$(NAME)$(API).$(EXT).$(VERSION)
	@-echo "[done]"

################################################################

tarball:
	@-$(MAKE) clean
	@-cd .. && tar zcvf $(TARBALL_NAME).tar.gz \
		--exclude=bin --exclude=*~ --exclude=.svn \
		--exclude=CVS --exclude=*.notar --exclude=spec \
		--exclude=*.log --exclude contrib \
		--totals $(TREE_DIR)
	@-echo "[done]"

backup:
	@-$(MAKE) clean
	@-cd .. && tar Icvf $(NAME)-$(VERSION)-$(BUILD_ID).tar.bz2 $(TREE_DIR)
	@-echo "[done]"


##########################################################################
# Unit tests
##########################################################################

TEST=$(BUILDDIR)/$(NAME).test

test: $(TEST)

libhel.test:
	mkdir -p $(BUILD_TEST_DIR)
	$(CC) -Wall -g -pipe -O0 -lstdc++ -Isrc -lhel0 \
		-DUNIT_TEST_LIBHEL \
		hel/libhel.cpp \
		-o $(BUILD_TEST_DIR)/libhel.test


Quaternion.test:
	mkdir -p $(BUILD_TEST_DIR)
	$(CC) -Wall -g -pipe -O0 -L/usr/local/lib -lstdc++ -lm -lhel0 \
		-DUNIT_TEST_QUATERNION hel/Quaternion.cpp \
		-o $(BUILD_TEST_DIR)/Quaternion.test


win32.test-strip:
	strip --strip-all $(BUILD_TEST_DIR)/libhel-win32.test

cycle-win32: win32 install-win32 test-win32

test-win32:
	mkdir -p $(BUILD_TEST_DIR)
	CC="i586-mingw32msvc-g++ -mms-bitfields" \
	CPP="i586-mingw32msvc-cpp " \
	LD="i586-mingw32msvc-ld " \
	EXT="dll" \
	CFLAGS="$(DEBUG_CFLAGS) -I/usr/local/include/" \
	i586-mingw32msvc-g++ -mms-bitfields \
		-Wall -g -pipe -O0 -I/usr/local/include/ -DUNIT_TEST_LIBHEL  \
		hel/libhel.cpp \
		-o $(BUILD_TEST_DIR)/libhel-win32.test \
		-lstdc++ -L/usr/local/lib/ -lhel0


##########################################################################

$(BUILDDIR)/$(NAME).test : $(OBJS)
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LD_FLAGS)


