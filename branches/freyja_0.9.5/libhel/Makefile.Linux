################################################################
# libhel Core Makefile
#
# -- History ---------------------------------------------------
#
# 2007.05.11:
# Mongoose - Created from old unified Makefile. 
################################################################

################################################################
# Compiler and Cross Enviroments
################################################################

-include Makefile.Core

CC=gcc
JAVAC=javac
DEPS=./deps.sh
MAKE_CMD=make -f Makefile.Linux


################################################################

BUILD_SELECT=debug
DEPEND_FILE=depend.linux
BUILD_INSTALL_DIR=$(BUILD_ROOT_DIR)/linux/debug

################################################################

BUILD_DEBUG_DIR=$(BUILD_ROOT_DIR)/linux/debug
BUILD_RELEASE_DIR=$(BUILD_ROOT_DIR)/linux/release
BUILD_TEST_DIR=$(BUILD_ROOT_DIR)/linux/test

INSTALL_PREFIX=/usr
INSTALL_INC_DIR=$(INSTALL_PREFIX)/include
INSTALL_LIB_DIR=$(INSTALL_PREFIX)/lib
INSTALL_BIN_DIR=$(INSTALL_PREFIX)/bin

################################################################

LD_FLAGS=-lm -shared -lstdc++ -fPIC

RELEASE_CFLAGS=$(COMMON_CFLAGS) \
	-Wall \
	-ffast-math -funroll-loops \
	-fomit-frame-pointer -fexpensive-optimizations -O2

DEBUG_CFLAGS=$(COMMON_CFLAGS) -Wall -g -fPIC -DDEBUG -DEXPERIMENTAL -I.

BASE_DEFS=-I$(SRC_DIR)

DO_CC=$(CC) $(CFLAGS) -o $@ -c $<

################################################################

TARGETS=$(BUILDDIR)/$(MODULE)

auto: $(BUILD_SELECT)


################################################################

debug:
	@-mkdir -p $(BUILD_DEBUG_DIR)
	$(MAKE_CMD) targets BUILDDIR=$(BUILD_DEBUG_DIR) \
	MODULE="lib$(NAME).so.$(VERSION)" \
	CFLAGS="$(DEBUG_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

	@-mkdir -p ../bin/linux/debug/
	@-cp $(BUILD_DEBUG_DIR)/lib$(NAME).so.$(VERSION) \
	../bin/linux/debug/lib$(NAME)-$(API).so
	$(MAKE_CMD) libhel.test

release:
	@-mkdir -p $(BUILD_RELEASE_DIR)
	$(MAKE_CMD) targets BUILDDIR=$(BUILD_RELEASE_DIR) \
	MODULE="lib$(NAME).so.$(VERSION)" \
	CFLAGS="$(RELEASE_CFLAGS)" \
	LD_FLAGS="$(LD_FLAGS)"

	@-mkdir -p ../bin/linux/debug/
	@-cp $(BUILD_RELEASE_DIR)/lib$(NAME).so.$(VERSION) \
	../bin/linux/release/lib$(NAME)-$(API).so
	$(MAKE_CMD) libhel2.test

prof: 
	@-mkdir -p $(BUILD_PROF_DIR)
	$(MAKE_CMD) targets BUILDDIR=$(BUILD_PROF_DIR) \
	CFLAGS="$(DEBUG_CFLAGS) -pg" \
	LD_FLAGS="$(LD_FLAGS) -pg"

$(DEPEND_FILE):
	@-echo -n Making deps...
	@-echo "# Autogenerated dependency file" > $(DEPEND_FILE)
	@-find $(SRC_DIR) -name "*.cpp" -exec ./deps.sh -I. $(BASE_DEFS) {} \; >> $(DEPEND_FILE)
	@-echo "       [done]"


########################################################################

all: debug release prof

########################################################################

targets: $(TARGETS)

$(BUILDDIR)/$(MODULE) : $(OBJS) 
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LD_FLAGS)
	@-cp $(BUILDDIR)/$(MODULE) $(BUILDDIR)/lib$(NAME)-$(API).so


################################################################

-include $(DEPEND_FILE)

################################################################

clean:
	@-rm -f $(DEPEND_FILE)

	@-echo -n "Cleaning emacs files                        "
	@-rm -f `find . -name "*~" -print`
	@-echo "[done]"

	@-echo -n "Cleaning profiling output                   "
	@-rm -f gmon.out
	@-echo "[done]"

	@-echo -n "Cleaning TEST builds                        "
	@-rm -f $(BUILD_TEST_DIR)/*.test
	@-echo "[done]"

	@-echo -n "Cleaning DEBUG builds                       "
	@-rm -f $(BUILD_DEBUG_DIR)/*.o
	@-rm -f $(BUILD_DEBUG_DIR)/$(NAME)
	@-echo "[done]"

	@-echo -n "Cleaning PROF builds                        "
	@-rm -f $(BUILD_PROF_DIR)/*.o
	@-rm -f $(BUILD_PROF_DIR)/$(NAME)
	@-echo "[done]"

	@-echo -n "Cleaning RELEASE builds                     "
	@-rm -f $(BUILD_RELEASE_DIR)/*.o
	@-rm -f $(BUILD_RELEASE_DIR)/$(NAME)
	@-echo "[done]"


################################################################

#################################################################

DEB_DIR=/tmp/$(NAME).deb
NAME_DEB=libhel
VERSION_DEB=$(MAJOR_VERSION).$(MINOR_VERSION).$(MICRO_VERSION).$(BUILD_ID)

# Edited for Debian GNU/Linux.

DESTDIR =
NO_DEB=
INSTALL_BIN=$(DESTDIR)$(INSTALL_BIN_DIR)
INSTALL_LIB=$(DESTDIR)$(INSTALL_LIB_DIR)
INSTALL_INCLUDE=$(DESTDIR)$(INSTALL_INC_DIR)
INSTALL_DOC=$(DESTDIR)/usr/share/doc/$(NAME)
INSTALL_SHARE=$(DESTDIR)/usr/share/$(NAME)
INSTALL_PLUGIN_DIR=$(INSTALL_LIB)/$(BASE_NAME)/modules

deb:
	dpkg-buildpackage -rfakeroot
	$(MAKE_CMD) deb-info


deb-info:
	@-printf "================================================================================\n"
	dpkg --info ../libhel_*.deb
	@-printf " -------------------------------------------------------------------------------\n"
	dpkg --contents ../libhel_*.deb
	@-printf "================================================================================\n"


install: install-lib

install-dev: install-headers

################################################################

install-bin:
	@-echo -n "Installing bin                              "
	@-cp $(BUILD_INSTALL_DIR)/$(NAME) $(INSTALL_BIN_DIR)
	@-echo "[done]"


install-lib:
	@-echo -n "Installing lib                              "
	@-mkdir -p $(INSTALL_LIB)
	@-cp $(BUILD_INSTALL_DIR)/lib$(NAME).so.$(VERSION) $(INSTALL_LIB)
	@-cd $(INSTALL_LIB) && ln -sf lib$(NAME).so.$(VERSION) lib$(NAME)$(API).$(EXT)
	./libsetup.sh
	@-echo "[done]"

install-headers:
	@-echo -n "Installing headers                          "
	@-mkdir -p $(INSTALL_INCLUDE)/$(NAME)
	@-cp -f $(SRC_DIR)/*.h $(INSTALL_INCLUDE)/$(NAME)
	@-echo "[done]"


################################################################

uninstall-lib:
	@-echo -n "Uninstalling                                "
	@-rm -f $(INSTALL_DIR)/lib$(NAME)$(API).$(EXT).$(VERSION)
	@-echo "[done]"

################################################################

tarball:
	@-$(MAKE_CMD) clean
	@-cd .. && tar zcvf $(TARBALL_NAME).tar.gz \
		--exclude=bin --exclude=*~ --exclude=.svn \
		--exclude=CVS --exclude=*.notar --exclude=spec \
		--exclude=*.log --exclude contrib \
		--totals $(TREE_DIR)
	@-echo "[done]"

backup:
	@-$(MAKE_CMD) clean
	@-cd .. && tar Icvf $(NAME)-$(VERSION)-$(BUILD_ID).tar.bz2 $(TREE_DIR)
	@-echo "[done]"


##########################################################################
# Unit tests
##########################################################################

TEST=$(BUILDDIR)/$(NAME).test

test: $(TEST)

libhel.test:
	mkdir -p $(BUILD_TEST_DIR)
	$(CC) -Wall -g -pipe -O0 -lstdc++ -I../mstl/ -I. -DUNIT_TEST_LIBHEL \
		-L$(BUILD_DEBUG_DIR)/ -lhel-0.0.2 -lpthread \
		hel/libhel.cpp \
		-o $(BUILD_TEST_DIR)/libhel.test


libhel2.test:
	mkdir -p $(BUILD_TEST_DIR)
	$(CC) -Wall -g -pipe -O2 -lstdc++ -I../mstl/ -I. -DUNIT_TEST_LIBHEL \
		-L$(BUILD_RELEASE_DIR)/ -lhel-0.0.2 -lpthread \
		hel/libhel.cpp \
		-o $(BUILD_TEST_DIR)/libhel.test


libhel.unittest:
	export LD_LIBRARY_PATH=.


Quaternion.test:
	mkdir -p $(BUILD_TEST_DIR)
	$(CC) -Wall -g -pipe -O0 -L/usr/local/lib -lstdc++ -lm -lhel0 \
		-DUNIT_TEST_QUATERNION hel/Quaternion.cpp \
		-o $(BUILD_TEST_DIR)/Quaternion.test


##########################################################################

$(BUILDDIR)/$(NAME).test : $(OBJS)
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LD_FLAGS)


