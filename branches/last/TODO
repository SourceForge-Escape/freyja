
 =-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-=

  File     : TODO ( 2002.01.21 last update )
  Author   : Terry 'Mongoose' Hendrix II
  Project  : Freyja 0.3.x

 ---------------------------------------------------------------

  Programming wish list guidelines:
    1. Remove duplicate functionality
    2. Fix all FIXMEs when possible
    3. Check assertions, when assertions are made
    4. Audit memory managment code regularly
    5. Replace temporary hacks with robust, clean code
    6. Make and use test code per module/class
    7. Abstraction is law, or something
    8. Document as code is written

 =-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-=

 Milestones ( Public snapshot releases )

 [0.3.8] ( Projected release date:  )
  * Bug fix focus


 [0.3.5] ( Projected release date: 2002.03.23 )
  * Transition to libfreyja backend complete
  * New backend system based on CVS UML design
  * All possible widgets mlisp controled
  * Full skeletal editing ( deforms, blending, etc )
  * Better Light and Camera editing


 =-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-=

 [Deleveribles/Fixes for next Release]
  * Recalc normals when transforming meshes
  * Undo/Redo Stacks, key commands, and menu interface
  * More buttons for menu current mesh operations
  * Expand Particle to allow GL_POINTS/GL_LINES particles also
  * New light and camera 3d "icons", eg directional and point
  * Light editing tab
  * Camera editing tab
  * Texture to store filename strings/keys (maybe even image 
    buffers to allow for saving) for material use
  * Animation playback support
  * Prompt to ask for file overwrite and close w/o saving
  * Mlisp support for toolbar and slider
  * Backport bone joint support from libfreyja?


 [General]
  * Roll over to new backend:
    libfreyja_model, libfreyja_particle, libfreyja_render, etc
  * Replace freyja_egg Camera and Light classes with libfreyja_*
  * Replace freyja_egg Particle class with libfreyja_particle
  * Seperate skeletal animation type for static, blending, and deforms?
  * Rewrite all entry code to focus on backend as main entry 
    and start interface from it, most likey using resource
    for total gui control
  * Bone editing support just does view/edit not create in interface
  * Resolve animation/model editing interface/rendering
    eg meshes can't be edited w/ boneframes loaded
  * Control::Event should be able to control the
    event system to be able to consume events
  * Normals editing support
  * Edit by vertex groups
  * Also add interactive sphere primative generation as an egg plugin
    It's a good time to flesh out plugin's interactive API
  * Bbox selected vertex 'group' (list) operations
  * Recently used files menu list
  * Material support does support bump/env mapping
  * CSG support?


 [Event system]
  * Prune events down
  * Wrap Resource to hide more of the event system from interface
    programmer
  * Replace gobal extern data use with event_ and querey_ func
  * Add modifer key support to Resource
  * Refine event system to capture it more acurately for Undo/Redo
  * Remove all unused/obsolete events and cmds
  * Pull view stuff out of model (eg zoom, plane)
  * Pull model stuff out of view (eg polybuild, etc )
  * Replace model editing system mouse interface and projection


 [Backend]
  * Bring file format export support at least up to GooseEgg's level
  * List interface to objects (only allow switching to next existing)
  * PKZIP file browsing ( for compressed files )
  * Generate vertices in XY plane from image alpha/color
    ( Generate a 3d sprite from an image )
  * Model editing util plugin interface ( tool plugins )


 [Interface]
  * Trackball emulation for mouse rotation?
  * Cache the mesh/scene transforms
  * Event timer to stop blocking events when modeler is slow
  * Add multiwindow modeling support back?

 =-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-=

 Scratch pad for final implementation candidate #1:

 Model :: vertex { xyz|3; w|<?>; b|<?>; } 

 Render :: render_vertex { xyz|3; uv|3; normal|3; w|<?>; b|<?>; }

 Note: Remember to enforce 'b|<0> + ... + b|<n> = 1.0' at control
       and model level

 Control :: control_vertex { xyz|3; }

 Model :: tristrip { vertex|<?>; }

 Model :: mesh { tristrip|<?>;  vertex|<?> frame; }

 Model :: joint { matrix|1 local; matrix|1 combined; 
                  limit_min|3; limit_max|3; quat|1;
                  joint|1 parent; }


 * Suggest hw motion capture spec release

 =-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-=